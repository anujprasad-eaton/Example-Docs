{
  "Chatbot/Quickstart.html": {
    "href": "Chatbot/Quickstart.html",
    "title": "Get Started | Eaton Docs",
    "keywords": "Get Started What is Virtual Agents? Note Information the user should notice even if skimming. Tip Optional information to help a user be more successful. Important Essential information required for user success. Caution Negative potential consequences of an action. Warning Dangerous certain consequences of an action."
  },
  "content-authoring/code-in-docs.html": {
    "href": "content-authoring/code-in-docs.html",
    "title": "How to include code in docs | Eaton Docs",
    "keywords": "How to include code in docs There are several ways to include code in an article published on docs.microsoft.com: Individual elements (words) within a line. Here's an example of code style. Use code format when referring to named parameters and variables in a nearby code block in your text. Code format may also be used for properties, methods, classes, and language keywords. For more information, see Code elements later in this article.. Code blocks in the article Markdown file. ```csharp public static void Log(string message) { _logger.LogInformation(message); } ``` Use inline code blocks when it's impractical to display code by reference to a code file. For more information, see Code blocks later in this article. Code blocks by reference to a code file in the local repository. :::code language=\"csharp\" source=\"intro/samples/cu/Controllers/StudentsController.cs\" range=\"2-24,26\"::: For more information, see In-repo snippet references later in this article. Code blocks by reference to a code file in another repository. :::code language=\"csharp\" source=\"~/samples-durable-functions/samples/csx/shared/Location.csx\" highlight=\"2,5\"::: For more information, see Out-of-repo snippet references later in this article. Code blocks that let the user execute code in the browser. :::code source=\"PowerShell.ps1\" interactive=\"cloudshell-powershell\"::: For more information, see Interactive code snippets later in this article. Besides explaining the Markdown for each of these ways to include code, the article provides some general guidance for all code blocks . Code elements A \"code element\" is a programming language keyword, class name, property name, and so forth. It's not always obvious what qualifies as code. For example, NuGet package names should be treated as code. When in doubt, see Text formatting guidelines . Inline code style To include a code element in article text, surround it with backticks (`) to indicate code style. Inline code style shouldn't use the triple-backtick format. Markdown Rendered By default, the Entity Framework interprets a property that's named `Id` or `ClassnameID` as the primary key. By default, the Entity Framework interprets a property that's named Id or ClassnameID as the primary key. When an article is localized (translated into other languages), text styled as code is left untranslated. If you want to prevent localization without using code style, see Non-localized strings . Bold style Some older style guides specify bold for inline code. Bold is an option when code style is so obtrusive as to compromise readability. For example, a Markdown table with mostly code elements might look too busy with code styling everywhere. If you choose to use bold style, use non-localized strings syntax to make sure that code is not localized. Links A link to reference documentation may be more helpful than code format in some contexts. If you use a link, don't apply code format to the link text. Styling a link as code can obscure the fact that the text is a link. If you use a link and refer to the same element later in the same context, make the subsequent instances code format rather than links. Placeholders If you want the user to replace a section of displayed code with their own values, use placeholder text marked off by angle brackets or curly braces. For example: az group delete -n <ResourceGroupName> . Explain that the brackets or braces must be removed when substituting real values. Code blocks The syntax for including code in a doc depends on where the code is located: In the article Markdown file In a code file in the same repository In a code file in a different repository Following are guidelines that apply to all three types of code blocks: Automate code validation. Highlight key lines of code. Avoid horizontal scroll bars. Screenshots All of the methods listed in the preceding section result in usable code blocks: You can copy and paste from them. They're indexed by search engines. They're accessible to screen readers. These are just a few of the reasons why IDE screenshots aren't recommended as a method of including code in an article. Use IDE screenshots for code only if you're showing something about the IDE itself, like IntelliSense. Don't use screenshots just to show colorization and highlighting. Code validation Some repositories have implemented processes that automatically compile all sample code to check for errors. The .NET repository does this. For more information, see Contributing in the .NET repository. If you are including code blocks from another repository, work with the owners on a maintenance strategy for the code so that your included code does not break or go out of date as new versions of the libraries the code uses are shipped. Highlighting Snippets typically include more code than necessary in order to provide context. It helps readability when you highlight the key lines that you're focusing on in the snippet, as in this example: You can't highlight code when you include it in the article Markdown file. It works only for code snippets included by reference to a code file. Horizontal scroll bars Break up long lines to avoid horizontal scroll bars. Scroll bars on code blocks make code hard to read. They're especially problematic on longer code blocks, where it may be impossible to see the scroll bar and the line you want to read at the same time. A good practice for minimizing horizontal scroll bars on code blocks is to break up code lines longer than 85 characters. But keep in mind that the presence or absence of a scroll bar isn't the only criterion of readability. If breaking a line before 85 hurts readability or copy-paste convenience, feel free to go over 85. Inline code blocks Use inline code blocks only when it's impractical to display code by reference to a code file. Inline code is generally more difficult to test and keep up to date compared to a code file that is part of a complete project. And inline code may omit context that could help the developer to understand and use the code. These considerations apply mainly to programming languages. Inline code blocks can also be used for outputs and inputs (such as JSON), query languages (such as SQL), and scripting languages (such as PowerShell). There are two ways to indicate a section of text in an article file is a code block: by fencing it in triple-backticks (```) or by indenting it. Fencing is preferred because it lets you specify the language. Avoid using indentation because it's too easy to get wrong and it may be hard for another writer to understand your intent when they need to edit your article. Language indicators are placed immediately after the opening triple-backticks, as in the following example: Markdown: ```json { \"aggregator\": { \"batchSize\": 1000, \"flushTimeout\": \"00:00:30\" } } ``` Rendered: { \"aggregator\": { \"batchSize\": 1000, \"flushTimeout\": \"00:00:30\" } } For information about the values you can use as language indicators, see Language names and aliases . If you use a language or environment word after the triple-backticks (```) that isn't supported, that word appears in the code section title bar on the rendered page. Whenever possible, use a language or environment indicator in your inline code blocks. Note If you copy and paste code from a Word document, make sure it has no \"curly quotes,\" which aren't valid in code (for example, “ and ’ ). If it does, change them back to normal quotes ( ' and \" ). Alternatively, rely on the Docs Authoring Pack, smart quotes replacement feature . In-repo snippet references The preferred way to include code snippets for programming languages in docs is by reference to a code file. This method gives you the ability to highlight lines of code and makes the wider context of the snippet available on GitHub for developers to use. You can include code by using the triple colon format (:::) either manually or in Visual Studio Code with the help of the docs.microsoft.com Authoring Pack . In Visual Studio Code, click Alt + M or Option + M and select Snippet. Once Snippet is selected, you will be prompted for Full Search, Scoped Search or Cross-Repository Reference. To search locally, select Full Search. Enter a search term to find the file. Once you've found the file, select the file. Next, select an option to determine which line(s) of code should be included in the snippet. The options are: ID , Range and None . Based on your selection from Step 4, provide a value if necessary. Display entire code file: :::code language=\"csharp\" source=\"intro/samples/cu/Controllers/StudentsController.cs\"::: Display part of a code file by specifying line numbers: :::code language=\"csharp\" source=\"intro/samples/cu/Controllers/StudentsController.cs\" range=\"2-24,26\"::: Display part of a code file by specifying a snippet name: :::code language=\"csharp\" source=\"intro/samples/cu/Controllers/StudentsController.cs\" id=\"snippet_Create\"::: The following sections explain these examples: Use a relative path to the code file Include only selected line numbers Refer to a named snippet Highlight selected lines For more information, see Snippet syntax reference later in this article. Path to code file Example: :::code language=\"csharp\" source=\"intro/samples/cu/Controllers/StudentsController.cs\" range=\"2-24,26\"::: The example is from the ASP.NET docs repo, aspnetcore/data/ef-mvc/crud.md article file. The code file is referenced by a relative path to aspnetcore/data/ef-mvc/intro/samples/cu/Controllers/StudentsController.cs in the same repository. Selected line numbers Example: :::code language=\"csharp\" source=\"intro/samples/cu/Controllers/StudentsController.cs\" range=\"2-24,26\"::: This example displays only lines 2-24 and 26 of the StudentController.cs code file. Prefer named snippets over hard-coded line numbers, as explained in the next section. Named snippet Example: :::code language=\"csharp\" source=\"intro/samples/cu/Controllers/StudentsController.cs\" id=\"snippet_Create\"::: Use only letters and underscores for the name. The example displays the snippet_Create section of the code file. The code file for this example has snippet tags in comments in the C# code: // code excluded from the snippet // <snippet_Create> // code included in the snippet // </snippet_Create> // code excluded from the snippet Whenever you can, refer to a named section rather than specifying line numbers. Line number references are brittle because code files inevitably change in ways that make line numbers change. You don't necessarily get notified of such changes. Your article eventually starts showing the wrong lines and you have no clue anything has changed. Highlighting selected lines Example: :::code language=\"csharp\" source=\"intro/samples/cu/Controllers/StudentsController.cs\" range=\"2-24,26\" highlight=\"2,5\"::: The example highlights lines 2 and 5, counting from the start of the displayed snippet. Line numbers to highlight don't count from the start of the code file. In other words, lines 3 and 6 of the code file are highlighted. Out-of-repo snippet references If the code file you want to reference is in a different repository, set up the code repository as a dependent repository . When you do that, you specify a name for it. That name then acts like a folder name for purposes of code references. For example, the docs repository is Azure/azure-docs , and the code repository is Azure/azure-functions-durable-extension . In the root folder of azure-docs , add the following section in .openpublishing.publish.config.json : { \"path_to_root\": \"samples-durable-functions\", \"url\": \"https://github.com/Azure/azure-functions-durable-extension\", \"branch\": \"master\", \"branch_mapping\": {} }, Now when you refer to samples-durable-functions as if it were a folder in azure-docs , you're actually referring to the root folder in the azure-functions-durable-extension repository. You can include code by using the triple colon format (:::) either manually or in Visual Studio Code with the help of the docs.microsoft.com Authoring Pack . In Visual Studio Code, click Alt + M or Option + M and select Snippet. Once Snippet is selected, you will be prompted for Full Search, Scoped Search or Cross-Repository Reference. To search across repositories, select Cross-Repository Reference. You will be given a selection of repositories that are in .openpublishing.publish.config.json . Select a repository. Enter a search term to find the file. Once you've found the file, select the file. Next, select an option to determine which line(s) of code should be included in the snippet. The options are: ID , Range and None . Based on your selection from Step 5, provide a value. Your snippet reference will look like this: :::code language=\"csharp\" source=\"~/samples-durable-functions/samples/csx/shared/Location.csx\" highlight=\"2,5\"::: In the azure-functions-durable-extension repository, that code file is in the samples/csx/shared folder. As noted earlier , line numbers for highlighting are relative to the start of the snippet rather than the start of the file. Note The name you assign to the dependent repository is relative to the root of the main repository, but the tilde (~) refers to the root of the doc set. The doc set root is determined by build_source_folder in .openpublishing.publish.config.json . The path to the snippet in the preceding example works in the azure-docs repo because build_source_folder refers to the repo root ( . ). If build_source_folder were articles , the path would start with ~/../samples-durable-functions instead of ~/samples-durable-functions . Interactive code snippets Inline interactive code blocks For the following languages, code snippets can be made executable in the browser window: Azure Cloud Shell Azure PowerShell Cloud Shell C# REPL When interactive mode is enabled, the rendered code boxes have a Try It or Run button. For example: ```azurepowershell-interactive New-AzResourceGroup -Name myResourceGroup -Location westeurope ``` renders as follows: New-AzResourceGroup -Name myResourceGroup -Location westeurope To turn on this feature for a particular code block, use a special language identifier. The available options are: azurepowershell-interactive - Enables the Azure PowerShell Cloud Shell, as in the preceding example azurecli-interactive - Enables the Azure Cloud Shell csharp-interactive - Enables the C# REPL For the Azure Cloud Shell and PowerShell Cloud Shell, users can run commands against only their own Azure account. Code snippets included by reference You can enable interactive mode for code snippets included by reference. Here are examples: :::code source=\"PowerShell.ps1\" interactive=\"cloudshell-powershell\"::: :::code source=\"Bash.sh\" interactive=\"cloudshell-bash\"::: To turn on this feature for a particular code block, use the interactive attribute. The available attribute values are: cloudshell-powershell - Enables the Azure PowerShell Cloud Shell, as in the preceding example cloudshell-bash - Enables the Azure Cloud Shell try-dotnet - Enables Try .NET try-dotnet-class - Enables Try .NET with class scaffolding try-dotnet-method - Enables Try .NET with method scaffolding For the Azure Cloud Shell and PowerShell Cloud Shell, users can only run commands against their own Azure account. Snippet syntax reference Syntax: :::code language=\"<language>\" source=\"<path>\" <attribute>=\"<attribute-value>\"::: Important This syntax is a block Markdown extension. It must be used on its own line. <language> ( optional ) Language of the code snippet. For more information, see the Supported languages section later in this article. <path> ( mandatory ) Relative path in the file system that indicates the code snippet file to reference. <attribute> and <attribute-value> ( optional ) Used together to specify how the code should be retrieved from the file and how it should be displayed: range : 1,3-5 A range of lines. This example includes lines 1, 3, 4, and 5. id : snippet_Create The ID of the snippet that needs to be inserted from the code file. This value cannot co-exist with range. highlight : 2-4,6 Range and/or numbers of lines that need to be highlighted in the generated code snippet. The numbering is relative to the lines displayed (as specified by range or id), not the file. interactive : cloudshell-powershell , cloudshell-bash , try-dotnet , try-dotnet-class , try-dotnet-method String value determines what kinds of interactivity are enabled. For details about tag name representation in code snippet source files by language, see the DocFX guidelines . Supported languages The Docs Authoring Pack includes a feature to provide statement completion and validation of the available language identifiers for code fence blocks. Fenced code blocks Name Valid aliases .NET Core CLI dotnetcli 1C 1c ABNF abnf Access logs accesslog Ada ada ARM assembler armasm , arm AVR assembler avrasm ActionScript actionscript , as Alan alan , i AngelScript angelscript , asc ANTLR antlr Apache apache , apacheconf AppleScript applescript , osascript Arcade arcade AsciiDoc asciidoc , adoc AspectJ aspectj ASPX aspx ASP.NET (C#) aspx-csharp ASP.NET (VB) aspx-vb AutoHotkey autohotkey AutoIt autoit Awk awk , mawk , nawk , gawk Axapta axapta AzCopy azcopy Azure CLI azurecli Azure CLI (Interactive) azurecli-interactive Azure Powershell azurepowershell Azure Powershell (Interactive) azurepowershell-interactive Bash bash , sh , zsh Basic basic BNF bnf C c C# csharp , cs C# (Interactive) csharp-interactive C++ cpp , c , cc , h , c++ , h++ , hpp C++/CX cppcx C++/WinRT cppwinrt C/AL cal Cache Object Script cos , cls CMake cmake , cmake.in Coq coq CSP csp CSS css Cap'n Proto capnproto , capnp Clojure clojure , clj CoffeeScript coffeescript , coffee , cson , iced Crmsh crmsh , crm , pcmk Crystal crystal , cr Cypher (Neo4j) cypher D d DAX Power BI dax DNS Zone file dns , zone , bind DOS dos , bat , cmd Dart dart Delphi delphi , dpr , dfm , pas , pascal , freepascal , lazarus , lpr , lfm Diff diff , patch Django django , jinja Dockerfile dockerfile , docker dsconfig dsconfig DTS (Device Tree) dts Dust dust , dst Dylan dylan EBNF ebnf Elixir elixir Elm elm Erlang erlang , erl Excel excel , xls , xlsx Extempore extempore , xtlang , xtm F# fsharp , fs FIX fix Fortran fortran , f90 , f95 G-Code gcode , nc Gams gams , gms GAUSS gauss , gss GDScript godot , gdscript Gherkin gherkin GN for Ninja gn , gni Go go , golang Golo golo , gololang Gradle gradle Groovy groovy HTML html , xhtml HTTP http , https Haml haml Handlebars handlebars , hbs , html.hbs , html.handlebars Haskell haskell , hs Haxe haxe , hx Hy hy , hylang Ini ini Inform7 inform7 , i7 IRPF90 irpf90 JSON json Java java , jsp JavaScript javascript , js , jsx Kotlin kotlin , kt Kusto kusto Leaf leaf Lasso lasso , ls , lassoscript Less less LDIF ldif Lisp lisp LiveCode Server livecodeserver LiveScript livescript , ls Lua lua Makefile makefile , mk , mak Markdown markdown , md , mkdown , mkd Mathematica mathematica , mma , wl Matlab matlab Maxima maxima Maya Embedded Language mel Mercury mercury mIRC Scripting Language mirc , mrc Mizar mizar Managed Object Format mof Mojolicious mojolicious Monkey monkey Moonscript moonscript , moon MS Graph (Interactive) msgraph-interactive N1QL n1ql NSIS nsis Nginx nginx , nginxconf Nimrod nimrod , nim Nix nix OCaml ocaml , ml Objective C objectivec , mm , objc , obj-c OpenGL Shading Language glsl OpenSCAD openscad , scad Oracle Rules Language ruleslanguage Oxygene oxygene PF pf , pf.conf PHP php , php3 , php4 , php5 , php6 Parser3 parser3 Perl perl , pl , pm Plaintext no highlight plaintext Pony pony PostgreSQL & PL/pgSQL pgsql , postgres , postgresql PowerShell powershell , ps PowerShell (Interactive) powershell-interactive Processing processing Prolog prolog Properties properties Protocol Buffers protobuf Puppet puppet , pp Python python , py , gyp Python profiler results profile Q# qsharp Q k , kdb QML qml R r Razor CSHTML cshtml , razor , razor-cshtml ReasonML reasonml , re RenderMan RIB rib RenderMan RSL rsl Roboconf graph , instances Robot Framework robot , rf RPM spec files rpm-specfile , rpm , spec , rpm-spec , specfile Ruby ruby , rb , gemspec , podspec , thor , irb Rust rust , rs SAS SAS , sas SCSS scss SQL sql STEP Part 21 p21 , step , stp Scala scala Scheme scheme Scilab scilab , sci Shape Expressions shexc Shell shell , console Smali smali Smalltalk smalltalk , st Solidity solidity , sol Stan stan Stata stata Structured Text iecst , scl , stl , structured-text Stylus stylus , styl SubUnit subunit Supercollider supercollider , sc Swift swift Tcl tcl , tk Terraform (HCL) terraform , tf , hcl Test Anything Protocol tap TeX tex Thrift thrift TOML toml TP tp Twig twig , craftcms TypeScript typescript , ts VB.NET vbnet , vb VBScript vbscript , vbs VHDL vhdl Vala vala Verilog verilog , v Vim Script vim X++ xpp x86 Assembly x86asm XL xl , tao XQuery xquery , xpath , xq XAML xaml XML xml , xhtml , rss , atom , xjb , xsd , xsl , plist YAML yml , yaml Zephir zephir , zep Tip The Docs Authoring Pack, Dev Lang Completion feature uses the first valid alias when multiple aliases are available. Next steps For information on text formatting for content types other than code, see Text formatting guidelines ."
  },
  "content-authoring/docs-authoring/dev-lang-completion.html": {
    "href": "content-authoring/docs-authoring/dev-lang-completion.html",
    "title": "Dev lang completion - Docs Authoring Pack | Eaton Docs",
    "keywords": "Dev lang completion Summary Contributors need assistance determining the valid language identifiers (dev langs) that can follow triple-backticks (code fence openings) in a Markdown file. Unfortunately, build-time validation of dev langs doesn't exist. The result is disparate representations of a single language within the same conceptual docset. Consider C# as an example. Contributors have used c# , C# , cs , csharp , and others as dev lang representations of the language. Which of the preceding representations is correct? The Dev lang completion feature dispels the confusion by displaying a list of known dev langs. Upon selecting a dev lang name from IntelliSense: The code fence is closed. The caret is positioned in the code fence. Preferences It's not possible to disable this feature. The following settings are available: Display commonly used dev langs Display all known dev langs Display commonly used dev langs Only a subset of the valid dev langs will be used in a single docset. To enhance the user experience: In Visual Studio Code, open the docset to the root directory. Select File > Preferences > Settings and filter by Docs Markdown Extension . Click the Edit in settings.json link in the Markdown: Docset Languages section. Add the following markdown.docsetLanguages property to the settings.json file: { \"markdown.docsetLanguages\": [ ] } Position your caret in the property's empty array, and activate IntelliSense (via Ctrl + Space ). A list of known dev lang names appears. Add dev lang names to the array until you're satisfied with the list. For example, the following list will display four dev lang names to the user after typing triple-ticks: { \"markdown.docsetLanguages\": [ \".NET Core CLI\", \"C#\", \"Markdown\", \"YAML\" ] } Save your changes to the settings.json file. Warning An empty markdown.docsetLanguages array causes all known dev langs to display. Display all known dev langs By default, all known dev lang names are displayed in IntelliSense. This setting overrides the markdown.docsetLanguages property described in Display commonly used dev langs . To change this setting: Select File > Preferences > Settings and filter by Docs Markdown Extension . Toggle the setting in the Markdown: All Available Languages section. In action Below is a brief demonstration of this feature:"
  },
  "content-authoring/docs-authoring/image-compression.html": {
    "href": "content-authoring/docs-authoring/image-compression.html",
    "title": "Image Compression - Docs Authoring Pack | Eaton Docs",
    "keywords": "Image compression Extension name The Docs Authoring Pack, Visual Studio Code meta extension is comprised of multiple sub extensions. This feature is included in the Docs Images extension. The Docs Markdown extension is part of the Docs Authoring Pack, there is no need to install it separately. Summary All documentation is provided via the web, with the exception of PDF versions of docs. When serving static content, it is best to minimize the number of bytes sent over the wire. One way to do that is to compress images at rest. The Docs Authoring Pack extension includes image compression context menu items. The following image types / extensions are supported: *.png *.jpg *.jpeg *.gif *.svg *.webp The lossless image compression algorithms are used, where applicable. Compress image From the Explorer navigation pane, right-click on an image file - then select the Compress image option. The image is then compressed. Compress images in folder From the Explorer navigation pane, right-click on a folder containing images - then select the Compress images in folder option. All images in the folder are compressed. Considerations Large resolution images are implicitly resized. The maximum dimensions are based on the platform suggested max width of 1,200px . The max is only used when images are larger than they are recommended to be, and they will maintain the aspect ratio when automatically resized. Preferences The maximum dimensions are configurable, but a default max width of 1200 pixels exists. To configure the max dimensions, select File -> Preferences -> Settings and filter by \"Docs Image Extension\" . Note A value of 0 in either the Max Width or Max Height will simply ignore resolution variances. In action Below is a brief demonstration of this feature."
  },
  "content-authoring/docs-authoring/metadata-updates.html": {
    "href": "content-authoring/docs-authoring/metadata-updates.html",
    "title": "Metadata Updates - Docs Authoring Pack | Eaton Docs",
    "keywords": "Update metadata Extension name The Docs Authoring Pack, Visual Studio Code meta extension is comprised of multiple sub extensions. This feature is included in the Docs Markdown extension. The Docs Markdown extension is part of the Docs Authoring Pack, there is no need to install it separately. Summary In a Markdown ( *.md ) file, there are two contextual menu items specific to metadata. When you right-click anywhere in the text editor, you will see something similar to the following menu items: Update ms.date metadata value Selecting the Update ms.date Metadata Value option will set the current Markdown files ms.date value to today's date. If the document does not have an ms.date metadata field, no action is taken. Update implicit metadata values Selecting the Update implicit metadata values option will find and replace all possible metadata values that could be implicitly specified. Metadata values are implicitly specified in the docfx.json file, under the build/fileMetadata node. Each key value pair in the fileMetadata node represents metadata defaults. For example, a Markdown file in the top-level/sub-folder directory that omits the ms.author metadata value could implicitly specify a default value to use in the fileMetadata node. { \"build\": { \"fileMetadata\": { \"ms.author\": { \"top-level/sub-folder/**/**.md\": \"dapine\" } } } } In this case, all Markdown files would implicitly take on the ms.author: dapine metadata value. The feature acts on these implicit settings found in the docfx.json file. If a Markdown file contains metadata with values that are explicitly set to something other than the implicit values, they are overridden. Consider the following Markdown file metadata, where this Markdown file resides in top-level/sub-folder/includes/example.md : --- ms.author: someone-else --- # Content If the Update implicit metadata values option was executed on this file, with the assumed docfx.json content from above the metadata value would be updated to ms.author: dapine . --- ms.author: dapine --- # Content In action Below is a brief demonstration of this feature."
  },
  "content-authoring/docs-authoring/reformat-table.html": {
    "href": "content-authoring/docs-authoring/reformat-table.html",
    "title": "Reformat Markdown Tables - Docs Authoring Pack | Eaton Docs",
    "keywords": "Reformat Markdown tables Extension name The Docs Authoring Pack, Visual Studio Code meta extension is comprised of multiple sub extensions. This feature is included in the Docs Markdown extension. The Docs Markdown extension is part of the Docs Authoring Pack, there is no need to install it separately. Summary In a Markdown ( *.md ) file, when you select a complete table - two table formatting context menu items are now available. Right-click on the selected Markdown table to open the context menu. You will see something similar to the following menu items: Tip This feature does not work with multiple table selections, but rather is intended for a single Markdown table. You must select the entire table, including headings for desired results. Consolidate selected table Selecting the Consolidate selected table option will collapse the table headings and contents with only a single space on either side of each value. Evenly distribute selected table Selecting the Evenly distribute selected table option will calculate the longest value in each column and evenly distribute all the other values accordingly with space. Considerations The feature will not impact the rendering of the table, but it will help to improve the readability of the table - thus making more maintainable. The reformatting table feature will keep column alignment intact. Consider the following table: | Column1 | This is a long column name | Column3 | | |--:|---------|:--:|:----| || | | | | | | | a value | || | | | | | | This is a long value | but why? | | | | | | | | | | Here is something | | | | | | After being \"evenly distributed\": | Column1 | This is a long column name | Column3 | | |--------:|----------------------------|:--------------------:|:------------------| | | | | | | | | | a value | | | | | | | | | This is a long value | but why? | | | | | | | | | | Here is something | | | | | | After being \"consolidated\": | Column1 | This is a long column name | Column3 | | |-:|--|:-:|:-| | | | | | | | | | a value | | | | | | | | | This is a long value | but why? | | | | | | | | | | Here is something | | | | | | In action Below is a brief demonstration of this feature."
  },
  "content-authoring/docs-authoring/smart-quote-replacement.html": {
    "href": "content-authoring/docs-authoring/smart-quote-replacement.html",
    "title": "Automatic Smart Quote Replacements - Docs Authoring Pack | Eaton Docs",
    "keywords": "Smart quote replacement Extension name The Docs Authoring Pack, Visual Studio Code meta extension is comprised of multiple sub extensions. This feature is included in the Docs Markdown extension. The Docs Markdown extension is part of the Docs Authoring Pack, there is no need to install it separately. Summary Content developers are responsible for authoring some of the most advanced features of modern technology and intelligence, yet our tooling today prefers the usage of \"dumb quotes\" in Markdown. The antonym of course being \"smart quotes\". Smart quotes are common with ideal typographies, but not preferred with Markdown and rendered HTML. When working on a Microsoft Word document for example, you may have noticed that when you hold the Shift and type a \" Microsoft Word quickly replaces the \" character with a smart quote equivalent “ character. Description Unicode Smart Quote Replacement Double left quote \\u201c “ \" Double right quote \\u201d ” \" Single left quote \\u2018 ‘ ' Single right quote \\u2019 ’ ' In a Markdown ( *.md ) file, when you paste in text or as you update content - this feature will actively evaluate the content and automatically replace values accordingly. Note The smart quote replacement feature also replaces other characters, such as but not limited to; ( ©, ™, ®, • , subscript and superscript characters). This is useful when pasting text from Word documents. Preferences This feature is optional, but defaults to true . To toggle this feature on or off: Select File > Preferences > Settings and filter by Docs Markdown Extension . Toggle the setting in the Markdown: Replace Smart Quotes section. In action Below is a brief demonstration of this feature."
  },
  "content-authoring/docs-authoring/sort-redirects.html": {
    "href": "content-authoring/docs-authoring/sort-redirects.html",
    "title": "Sort Redirects - Docs Authoring Pack | Eaton Docs",
    "keywords": "Sort redirects Extension name The Docs Authoring Pack, Visual Studio Code meta extension is comprised of multiple sub extensions. This feature is included in the Docs Markdown extension. The Docs Markdown extension is part of the Docs Authoring Pack, there is no need to install it separately. Summary With the evolution of a docs.microsoft.com docset, some Markdown files eventually will be deleted. When a Markdown file is deleted, we're required to provide a redirect so that any reference to the deleted article is properly resolved via the redirect. Redirections are specified in the .openpublishing.redirection.json file. Open the Command Palette, press F1 (or ⇧⌘P on macOS) Type: Docs: Sort master redirection file Select the command to execute it Observe changes to .openpublishing.redirection.json file Considerations The concept of \"daisy chaining\" exists with how the .openpublishing.redirection.json file was originally designed. Over time, files added as a redirect will eventually become stale. This happens when file A is deleted and needs a redirect to file B, then later file B is deleted and then redirects to file C. Ideally, both entries would point to C - so that A redirects to C, and B remains the same. This is a minor performance gain, and the feature is actively being worked on. In action Below is a brief demonstration of this feature."
  },
  "content-authoring/docs-authoring/sort-selection.html": {
    "href": "content-authoring/docs-authoring/sort-selection.html",
    "title": "Sort Selection - Docs Authoring Pack | Eaton Docs",
    "keywords": "Sort selection Extension name The Docs Authoring Pack, Visual Studio Code meta extension is comprised of multiple sub extensions. This feature is included in the Docs Markdown extension. The Docs Markdown extension is part of the Docs Authoring Pack, there is no need to install it separately. Summary In a Markdown ( *.md ) file, when you've made a selection - two sorting context menu items are now available. Right-click on the selected text to open the context menu. You will see something similar to the following menu items: Tip The sorting context menu items are hidden until there is a valid selection in the Visual Studio Code text editor. Sort selection ascending (A to Z) Selecting the Sort selection ascending (A to Z) option will sort the entire selection ascending, alphabetically from A to Z. Sort selection descending (Z to A) Selecting the Sort selection descending (Z to A) option will sort the entire selection ascending, alphabetically from Z to A. Considerations The underlying sorting mechanism uses natural language sorting. This makes it more powerful and comprehensive than standard sorting. Consider the following table: | Column1 | Column2 | |---------|----------------------------------------| | 1 | Number 1 | | Aa | The first letter in the alphabet | | Ab | The first letter in the alphabet | | C | The a letter after A in the alphabet | | M | Somewhere in the middle? | | 2 | Number 2 | | X | The alphabet letter is towards the end | | Z | The last letter in the alphabet | | 11 | Number 11 | Without natural language sorting, the order for Column1 would have been 1, 11, 2, etc. but instead it understands that 11 is greater than 2 - resulting in the following ascending order: | Column1 | Column2 | |---------|----------------------------------------| | 1 | Number 1 | | 2 | Number 2 | | 11 | Number 11 | | Aa | The first letter in the alphabet | | Ab | The first letter in the alphabet | | C | The a letter after A in the alphabet | | M | Somewhere in the middle? | | X | The alphabet letter is towards the end | | Z | The last letter in the alphabet | In action Below is a brief demonstration of this feature."
  },
  "content-authoring/get-started-setup-local.html": {
    "href": "content-authoring/get-started-setup-local.html",
    "title": "Set up Git repository locally | Eaton Docs",
    "keywords": "Set up Git repository locally for documentation This article describes the steps to set up a git repository on your local machine, with the intent to contribute to Microsoft documentation. Contributors may use a locally cloned repository to add new articles, do major edits on existing articles, or change artwork. You run these one-time setup activities to start contributing: Determine the appropriate repository Fork the repository to your GitHub account Choose a local folder for the cloned files Clone the repository to your local machine Configure the upstream remote value Important If you're making only minor changes to an article, you do not need to complete the steps in this article. You can continue directly to the quick changes workflow . Overview To contribute to Microsoft's documentation site, you can make and edit Markdown files locally by cloning the corresponding documentation repository. Microsoft requires you to fork the appropriate repository into your own GitHub account so that you have read/write permissions there to store your proposed changes. Then you use pull requests to merge changes into the read-only central shared repository. If you're new to GitHub, watch the following video for a conceptual overview of the forking and cloning process: Determine the repository Documentation hosted at docs.microsoft.com resides in several different repositories at github.com . If you are unsure of which repository to use, then visit the article on docs.microsoft.com using your web browser. Select the Edit link (pencil icon) on the upper right of the article. That link takes you to github.com location for the corresponding Markdown file in the appropriate repository. Note the URL to view the repository name. For example, these popular repositories are available for public contributions: Azure documentation https://github.com/MicrosoftDocs/azure-docs SQL Server documentation https://github.com/MicrosoftDocs/sql-docs Visual Studio documentation https://github.com/MicrosoftDocs/visualstudio-docs .NET Documentation https://github.com/dotnet/docs Azure .Net SDK documentation https://github.com/azure/azure-docs-sdk-dotnet ConfigMgr documentation https://github.com/MicrosoftDocs/SCCMdocs Fork the repository Using the appropriate repository, create a fork of the repository into your own GitHub account by using the GitHub website. A personal fork is required since all main documentation repositories provide read-only access. To make changes, you must submit a pull request from your fork into the main repository. To facilitate this process, you first need your own copy of the repository, in which you have write access. A GitHub fork serves that purpose. Go to the main repository's GitHub page and click the Fork button on the upper right. If you are prompted, select your GitHub account tile as the destination where the fork should be created. This prompt creates a copy of the repository within your GitHub account, known as a fork. Choose a local folder Make a local folder to hold a copy of the repository locally. Some of the repositories can be large; up to 5 GB for azure-docs for example. Choose a location with available disk space. Choose a folder name should be easy for you to remember and type. For example, consider a root folder C:\\docs\\ or make a folder in your user profile directory ~/Documents/docs/ Important Avoid choosing a local folder path that is nested inside of another git repository folder location. While it is acceptable to store the git cloned folders adjacent to each other, nesting git folders inside one another causes errors for the file tracking. Launch Git Bash The default location that Git Bash starts in is typically the home directory (~) or /c/users/<Windows-user-account>/ on Windows OS. To determine the current directory, type pwd at the $ prompt. Change directory (cd) into the folder that you created for hosting the repository locally. Note that Git Bash uses the Linux convention of forward-slashes instead of back-slashes for folder paths. For example, cd /c/docs/ or cd ~/Documents/docs/ Create a local clone Using Git Bash, prepare to run the clone command to pull a copy of a repository (your fork) down to your device on the current directory. Authenticate by using Git Credential Manager If you installed the latest version of Git for Windows and accepted the default installation, Git Credential Manager is enabled by default. Git Credential Manager makes authentication much easier because you don't need to recall your personal access token when re-establishing authenticated connections and remotes with GitHub. Run the clone command, by providing the repository name. Cloning downloads (clone) the forked repository on your local computer. Tip You can get your fork's GitHub URL for the clone command from the Clone or download button in the GitHub UI: Be sure to specify the path to your fork during the cloning process, not the main repository from which you created the fork. Otherwise, you cannot contribute changes. Your fork is referenced through your personal GitHub user account, such as github.com/<github-username>/<repo> . git clone https://github.com/<github-username>/<repo>.git Your clone command should look similar to this example: git clone https://github.com/smithj/azure-docs.git When you're prompted, enter your GitHub credentials. When you're prompted, enter your two-factor authentication code. Note Your credentials will be saved and used to authenticate future GitHub requests. You only need to do this authentication once per computer. The clone command runs and downloads a copy of the repository files from your fork into a new folder on the local disk. A new folder is made within the current folder. It may take a few minutes, depending on the repository size. You can explore the folder to see the structure once it is finished. Configure remote upstream After cloning the repository, set up a read-only remote connection to the main repository named upstream . You use the upstream URL to keep your local repository in sync with the latest changes made by others. The git remote command is used to set the configuration value. You use the fetch command to refresh the branch info from the upstream repository. If you're using Git Credential Manager , use the following commands. Replace the <repo> and <organization> placeholders. cd <repo> git remote add upstream https://github.com/<organization>/<repo>.git git fetch upstream View the configured values and confirm the URLs are correct. Ensure the origin URLs point to your personal fork. Ensure the upstream URLs point to the main repository, such as MicrosoftDocs or Azure. git remote -v Example remote output is shown. A fictitious git account named MyGitAccount is configured with a personal access token to access the repo azure-docs: origin https://github.com/MyGitAccount/azure-docs.git (fetch) origin https://github.com/MyGitAccount/azure-docs.git(push) upstream https://github.com/MicrosoftDocs/azure-docs.git (fetch) upstream https://github.com/MicrosoftDocs/azure-docs.git (push) If you made a mistake, you can remove the remote value. To remove the upstream value, run the command git remote remove upstream . Next steps To learn more about adding and updating content, continue to the GitHub contribution workflow ."
  },
  "content-authoring/get-started-setup-tools.html": {
    "href": "content-authoring/get-started-setup-tools.html",
    "title": "Install content authoring tools | Eaton Docs",
    "keywords": "Install content authoring tools This article describes the steps to interactively install Git client tools and Visual Studio Code. Install Git Install Visual Studio Code Install Docs Authoring Pack Important If you're making only minor changes to an article, you do not need to complete the steps in this article and can continue directly to the quick changes workflow . Major contributors are encouraged to complete these steps, which enable you to use the major/long-running changes workflow . Even if you have write permissions in the main repository, we highly recommend (and this guide assumes) that you fork and clone the repository , so that you have read/write permissions to store your proposed changes in your fork. Install Git client tools Install the latest version of Software Freedom Conservancy's Git client tools for your platform. Git for Windows . This install includes the Git version control system and Git Bash, the command-line app that you use to interact with your local Git repository. Git for Mac is provided as part of the Xcode Command Line Tools. Simply run git from the command line. You will be prompted to install the command line tools if needed. You can also download Git for Mac from the Software Freedom Conservancy. Git for Linux and Unix If you prefer a graphical user interface (GUI) over a command-line interface (CLI), see Software Freedom Conservancy's available GUI Clients page , GitHub's GitHub Desktop , or Visual Studio Code for some popular options. Follow the instructions for your chosen client for installation and configuration. In the next article, you will Set up a local Git repository . Additional Git resources are available here: Git terminology | Git basics | Learning Git and GitHub Understand Markdown editors Markdown is a lightweight markup language that is both easy to read and easy to learn. Therefore, it has rapidly become an industry standard. To write articles in Markdown, we recommend that you first download and install a Markdown editor. Visual Studio Code is the preferred tool for editing Markdown at Microsoft. Atom is another popular tool for editing Markdown. Markdown text is saved into files with .md extension. Additional details on how to write with Markdown, including Markdown basics and the features supported by Open Publishing Services (OPS) custom Markdown extensions, are covered in the Markdown Reference article. Visual Studio Code Visual Studio Code , also known as VS Code, is a lightweight editor that works on Windows, Linux, and Mac. It includes git integration, and support for extensions. Download and install VS Code . The VS Code home page should detect your operating system correctly. Windows Mac Linux Tip To launch VS Code and open the current folder, run the command code . in the command line or bash shell. If the current folder is part of a local git repo, the GitHub integration appears in Visual Studio Code automatically. Docs Authoring Pack Install the Docs Authoring Pack for Visual Studio Code. This set of extensions includes basic authoring assistance for help when writing Markdown, and a preview feature, so that you can see what the Markdown looks like in the style of the docs.microsoft.com site. Visit this marketplace page and select Install , or search for docsmsft.docs-authoring-pack in your extensions list in the VS Code window. The Docs Authoring Pack is accessible by pressing Alt+M inside of VS Code. The toolbar is hidden by default but can be shown. Edit the VS Code settings (Control+comma) and adding user setting \"markdown.showToolbar\": true to show the toolbar. For more information, see the Docs Authoring Pack page. Next steps Now you are ready to Set up a local Git repository ."
  },
  "content-authoring/how-to-write-docs-auth-pack.html": {
    "href": "content-authoring/how-to-write-docs-auth-pack.html",
    "title": "Docs Authoring Pack for Visual Studio Code | Eaton Docs",
    "keywords": "Docs Authoring Pack for VS Code The Docs Authoring Pack is a collection of VS Code extensions to aid with Markdown authoring for docs.microsoft.com. The pack is available in the VS Code Marketplace and contains the following extensions: Docs Markdown : Provides Markdown authoring assistance for docs.microsoft.com (Docs) content, including basic Markdown support and support for custom Markdown syntax in Docs, such as alerts, code snippets, and non-localizable text. Now also includes some basic YAML authoring assistance, such as inserting TOC entries. markdownlint : A popular Markdown linter by David Anson to help make sure your Markdown is valid. Code Spell Checker : A fully offline spell checker by Street Side Software. Docs Preview : Uses the docs.microsoft.com CSS for more accurate Markdown preview, including custom Markdown. Docs Article Templates : Allows users to scaffold Learn modules and apply Markdown skeleton content to new files. Docs YAML : Provides Docs YAML schema validation and auto-complete. Docs Images : Provides image compression and resizing for folders and individual files to help authors of docs.microsoft.com. Prerequisites and assumptions To insert relative links, images, and other embedded content with the Docs Markdown extension, you must have your VS Code workspace scoped to the root of your cloned Open Publishing System (OPS) repo. For example, if you have cloned the docs repository to C:\\git\\SomeDocsRepo\\ , then open that folder or a subfolder in VS Code: File > Open Folder menu, or code C:\\git\\SomeDocsRepo\\ from the command line. Some syntax supported by the extension, such as alerts and snippets, are custom Markdown for OPS. Custom Markdown will not render correctly unless published via OPS. How to use the Docs Markdown extension To access the Docs Markdown menu, type ALT+M . You can click or use the up and down arrows to select the command you want. Or you can type to start filtering, then hit ENTER when the function you want is highlighted in the menu. See the Docs Markdown readme for an up-to-date list of commands. How to generate a master redirect file The Docs Markdown extension includes a script to generate or update a master redirection file for a repo, based on the redirect_url metadata in individual files. This script checks every Markdown file in the repo for redirect_url , adds the redirection metadata to the master redirection file ( .openpublishing.redirection.json ) for the repo, and moves the redirected files to a folder outside the repo. To run the script: Select F1 to open the VS Code command palette. Start typing \"Docs: Generate...\" Select the command Docs: Generate master redirection file . When the script finishes running, the redirection results will show in the VS Code output pane, and the removed Markdown files will be added to the Docs Authoring\\redirects folder under your default path. Review the results. If they are as expected, submit a pull request to update the repo. How to assign keyboard shortcuts Type CTRL+K then Ctrl+S to open the Keyboard Shortcuts list. Search for the command, such as formatBold , for which you want to create a custom key binding. Click the plus that appears near the command name when you mouse over the line. After a new input box is visible, type the keyboard shortcut you want to bind to that particular command. For example, to use the common shortcut for bold, type Ctrl+B . It's a good idea to insert a when clause into your key binding, so it won't be available in files other than Markdown. To do this, open keybindings.json and insert the following line below the command name (be sure to add a comma between lines): \"when\": \"editorTextFocus && editorLangId == 'markdown'\" Your completed custom key binding should look like this in keybindings.json : [ { \"key\": \"ctrl+b\", \"command\": \"formatBold\", \"when\": \"editorTextFocus && editorLangId == 'markdown'\" } ] Tip Place your key bindings in this file to overwrite the defaults Save keybindings.json . For more information on key bindings, see the VS Code docs . How to show the legacy \"Gauntlet\" toolbar Former users of the extension code-named \"Gauntlet\" will notice that the authoring toolbar no longer appears at the bottom of the VS Code window when the Docs Markdown Extension is installed. This is because the toolbar took up a large space on the VS Code status bar and did not follow best practices for extension UX, so it is deprecated in the new extension. However, you can optionally show the toolbar by updating your VS Code settings.json file as follows: In VS Code, go to File > Preferences > Settings or select Ctrl+, . Select User Settings to change the settings for all VS Code workspaces or Workspace Settings to change them for just the current workspace. Select Extensions > Docs Markdown Extension Configuration , and then select Show the legacy toolbar in the bottom status bar . Once you've made your selection, VS Code updates the settings.json file. You will then be prompted to reload the window for the changes to take effect. Newer commands added to the extension will not be available from the toolbar. How to use Docs templates The Docs Article Templates extension lets writers in VS Code pull a Markdown template from a centralized store and apply it to a file. Templates can help ensure that required metadata is included in articles, that content standards are followed, and so on. Templates are managed as Markdown files in a public GitHub repository. To apply a template in VS Code Ensure the Docs Article Templates extension is installed and enabled. If you don't have the Docs Markdown extension installed, click F1 to open the command palette, start typing \"template\" to filter, then click Docs: Template . If you do have Docs Markdown installed, you can use either the command palette or click Alt+M to bring up the Docs Markdown QuickPick menu, then select Template from the list. Select the desired template from the list that appears. To add your GitHub ID and/or Microsoft alias to your VS Code settings The Templates extension supports three dynamic metadata fields: author, ms.author, and ms.date. That means that if a template creator uses these fields in the metadata header of a Markdown template, they will be auto-populated in your file when you apply the template, as follows: Metadata field Value author Your GitHub alias, if specified in your VS Code settings file. ms.author Your Microsoft alias, if specified in your VS Code settings file. If you are not a Microsoft employee, leave unspecified. ms.date The current date in the Docs-supported format, MM/DD/YYYY . The date is not automatically updated if you subsequently update the file - you must update it manually. This field is used to indicate the \"article freshness\". To set author and/or ms.author In VS Code, go to File > Preferences > Settings or select Ctrl+, . Select User settings to change the settings for all VS Code workspaces, or Workspace settings to change them for just the current workspace. In the Default Settings pane on the left, find Docs Article Templates Extension Configuration , click the pencil icon next to the desired setting, then click Replace in Settings. The User settings pane will open side by side, with a new entry at the bottom. Add your GitHub ID or Microsoft email alias, as appropriate, and save the file. You might need to close and restart VS Code for the changes to take effect. Now, when you apply a template that uses dynamic fields, your GitHub ID and/or Microsoft alias will be auto-populated in the metadata header. To make a new template available in VS Code Draft your template as a Markdown file. Submit a pull request to the templates folder of the MicrosoftDocs/content-templates repo. The docs.microsoft.com team will review your template and merge the PR if it meets docs.microsoft.com style guidelines. Once merged, the template will be available to all users of the Docs Article Templates extension. Demo several features Here's a short video that demonstrates the following features of the Docs Authoring Pack: YAML files Support for \"Docs: Link to file in repo\" Markdown files Update \"ms.date\" Metadata Value context menu option Code auto-completion support for code-fence language identifiers Unrecognized code-fence language identifier warnings / auto correction support Sort selection ascending (A to Z) Sort selection descending (Z to A) Contribution expectations The Docs Authoring Pack extension is open source and available for contributions to anyone with a GitHub account. There is a dedicated internal Microsoft team that actively works on this project. This team monitors issues and pull requests. The service level agreement (SLA) and expectation of getting a pull request reviewed is currently one week. The team is undergoing automation efforts to improve this turn around time. Next steps Explore the various features available in the Docs Authoring Pack, Visual Studio Code extension. Dev lang completion Image compression Metadata updates Reformat table Smart quote replacement Sort redirects Sort selection"
  },
  "content-authoring/how-to-write-links.html": {
    "href": "content-authoring/how-to-write-links.html",
    "title": "How to use links in documentation | Eaton Docs",
    "keywords": "Use links in documentation This article describes how to use hyperlinks from pages hosted at docs.microsoft.com. Links are easy to add into markdown with a few varying conventions. Links point users to content in the same page, in other neighboring pages, or on external sites and URLs. The docs.microsoft.com site backend uses Open Publishing Services (OPS), which supports CommonMark -compliant markdown parsed through the Markdig parsing engine. This markdown flavor is mostly compatible with GitHub Flavored Markdown (GFM) , as most docs are stored in GitHub and can be edited there. Additional functionality is added through Markdown extensions. Important All links must be secure ( https vs http ) whenever the target supports it (which the vast majority should). Link text The words that you include in link text should be friendly. In other words, they should be normal English words or the title of the page that you're linking to. Important Do not use \"click here.\" It's bad for search engine optimization and doesn't adequately describe the target. Correct: For more information, see the [contributor guide index](https://github.com/Azure/azure-content/blob/master/contributor-guide/contributor-guide-index.md). For more details, see the [SET TRANSACTION ISOLATION LEVEL](https://docs.microsoft.com/sql/t-sql/statements/set-transaction-isolation-level-transact-sql) reference. Incorrect: For more details, see [https://msdn.microsoft.com/library/ms173763.aspx](https://msdn.microsoft.com/library/ms173763.aspx). For more information, click [here](https://github.com/Azure/azure-content/blob/master/contributor-guide/contributor-guide-index.md). Links from one article to another There are two types of hyperlinks supported by the publishing system: URLs and file links . A URL link can be a URL path that is relative to the root of docs.microsoft.com, or an absolute URL that includes the full URL syntax (for example, https://github.com/MicrosoftDocs/PowerShell-Docs ). Use URL links when linking to content outside of the current docset or between autogenerated reference and conceptual articles within the docset. The simplest way to create a relative link is to copy the URL from your browser, then remove https://docs.microsoft.com/en-us from the value you paste into markdown. Do not include locales in URLs for Microsoft properties (for example, remove \"/en-us\" from the URL). A file link is used to link from one article to another within the docset. All file paths use forward-slash ( / ) characters instead of back-slash characters. An article links to another article in the same directory: [link text](article-name.md) An article links to an article in the parent directory of the current directory: [link text](../article-name.md) An article links to an article in a subdirectory of the current directory: [link text](directory/article-name.md) An article links to an article in a subdirectory of the parent directory of the current directory: [link text](../directory/article-name.md) Note None of the previous examples use the ~/ as part of the link. To link to an absolute path that begins at the root of the repository, start the link with / . Including the ~/ produces invalid links when navigating the source repositories on GitHub. Starting the path with / resolves correctly. Structure of links on docs.microsoft.com Content published on docs.microsoft.com has the following URL structure: https://docs.microsoft.com/<locale>/<product-service>/[<feature-service>]/[<subfolder>]/<topic>[?view=<view-name>] Examples: https://docs.microsoft.com/en-us/azure/load-balancer/load-balancer-overview https://docs.microsoft.com/en-us/powershell/azure/overview?view=azurermps-5.1.1 <locale> - identifies the language of the article (example: en-us or de-de) <product-service> - the name of the product or service (example: powershell, dotnet, or azure) [<feature-service>] - (optional) the name of the product's feature or subservice (example: csharp or load-balancer) [<subfolder>] - (optional) the name of a subfolder within a feature <topic> - the name of the article file for the topic (example: load-balancer-overview or overview) [?view=\\<view-name>] - (optional) the view name used by the version selector for content that has multiple versions available (example: azps-3.5.0) Tip In most cases, articles in the same docset have the same <product-service> URL fragment. For example: Same docset https://docs.microsoft.com/dotnet/core/get-started https://docs.microsoft.com/dotnet/framework/install Different docset https://docs.microsoft.com/dotnet/core/get-started https://docs.microsoft.com/visualstudio/whats-new Bookmark links For a bookmark link to a heading in the current file, use a hash symbol followed by the lowercase words of the heading. Remove punctuation from the heading and replace spaces with dashes: [Managed Disks](#managed-disks) To link to a bookmark heading in another article, use the file-relative or site-relative link plus a hash symbol, followed by the words of the heading. Remove punctuation from the heading and replace spaces with dashes: [Managed Disks](../../linux/overview.md#managed-disks) You can also copy the bookmark link from the URL. To find the URL, hover your mouse over the heading line on docs.microsoft.com. You should see a link icon appear: Click the link icon and then copy the bookmark anchor text from the URL (that is, the part after the hash). Note The Docs Extension also has tools to help create links. Explicit anchor links Adding explicit anchor links using the <a> HTML tag isn't required or recommended, except in hub and landing pages. Instead, use the auto-generated bookmarks as described in bookmark links . For hub and landing pages, declare anchors as follows: ## <a id=\"anchortext\" />Header text or ## <a name=\"anchortext\" />Header text And the following to link to the anchor: To go to a section on the same page: [text](#anchortext) To go to a section on another page. [text](filename.md#anchortext) Note Anchor text must always be lowercase and not contain spaces. XRef (cross reference) links XRef links are the recommended way to link to APIs, because they're validated at build time. To link to auto-generated API reference pages in the current docset or other docsets, use XRef links with the unique ID ( UID ) of the type or member. Tip You can use the Docs Markdown extension for VS Code (part of the Docs Authoring Pack) to insert .NET XRref links that are surfaced in the .NET API Browser . Check if the API you want to link to is on docs.microsoft.com by typing all or some of its full name in the .NET API browser or Windows UWP search box. If you don't see any results displayed, the type isn't yet on docs.microsoft.com. You can use one of the following syntaxes: Auto-links: <xref:UID> <xref:UID?displayProperty=nameWithType> By default, link text shows only the member or type name. The optional displayProperty=nameWithType query parameter produces fully qualified link text, that is, namespace.type for types, and type.member for type members, including enumeration type members. Markdown-style links: [link text](xref:UID) Use Markdown-style links for XRef when you want to customize the link text that's displayed. Examples: <xref:System.String> displays as <xref:System.String> <xref:System.String?displayProperty=nameWithType> displays as <xref:System.String?displayProperty=nameWithType> [String class](xref:System.String) displays as String class . The displayProperty=fullName query parameter works the same way as displayProperty=nameWithType for classes. That is, the link text becomes namespace.classname . However, for members, the link text displays as namespace.classname.membername , which may be undesirable. Note UIDs are case sensitive. For example, <xref:System.Object> resolves correctly but <xref:system.object> does not. XRef build warnings and incremental builds An incremental build only builds files that have changed or been affected by a change. If you see a build warning about an invalid XREF link, but the link is actually valid, this could be because the build was incremental. The file causing the warning didn't change, so it wasn't built and past warnings were replayed. The warning will disappear when the file changes or if you trigger a full build (you can start a full build on ops.microsoft.com). This is a drawback to incremental builds, because DocFX can't detect a data update inside the XREF service. Determine the UID The UID is usually the fully qualified class or member name. There are at least two ways to determine the UID: Right-click on the Docs page for a type or member, select View source , and then copy the content value for ms.assetid : Use the autocomplete site by appending some or all of the name of the type to the URL. For example, entering https://xref.docs.microsoft.com/autocomplete?text=Writeline in the address bar of your browser displays all the types and methods that contain Writeline in their name, along with their UID. Verify the UID To test if you have the correct UID, replace System.String in the following URL with your UID, and then paste it into the address bar of a browser: https://xref.docs.microsoft.com/query?uid=System.String Tip The UID in the URL is case-sensitive, and if you're checking a method overload UID, don't include spaces between the parameter types. If you see something like the following, you have the correct UID: [{\"uid\":\"System.String\",\"name\":\"String\",\"fullName\":\"System.String\",\"href\":\"https://docs.microsoft.com/dotnet/api/system.string\",\"tags\":\",/dotnet,netframework-4.5.1,netframework-4.5.2,netframework-4.5,...xamarinmac-3.0,public,\",\"vendor\":null,\"hash\":null,\"commentId\":\"T:System.String\",\"nameWithType\":\"System.String\"},{\"uid\":\"System.String\",\"name\":\"String\",\"fullName\":\"System.String\",\"href\":\"https://docs.microsoft.com/dotnet/api/system.string\",\"tags\":\",/dotnet,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6,netframework-4.6.1,...,xamarinmac-3.0,public,\",\"vendor\":null,\"hash\":null,\"commentId\":\"T:System.String\",\"nameWithType\":\"System.String\"}] If you just see [] displayed on the page, you have the wrong UID. Percent-encoding of URLs Special characters in the UID need to be HTML encoded as follows: Character HTML encoding ` %60 # %23 * %2A See a full list of percent-codes . Encoding examples: System.Threading.Tasks.Task`1 encodes as System.Threading.Tasks.Task%601 (see the section on generic types ) System.Exception.#ctor encodes as System.Exception.%23ctor System.Object.Equals* encodes as System.Object.Equals%2A Generic types Generic types are those types such as System.Collections.Generic.List<T> . If you browse to this type in the .NET API browser and look at its URL, you see that <T> is written as -1 in the URL, which actually represents `1 : https://docs.microsoft.com/dotnet/api/system.collections.generic.list-1 To link to a generic type such as List<T> , encode the ` backtick character as %60 , as shown in the following example: <xref:System.Collections.Generic.List%601> Methods To link to a method, you can either link to the general method page by adding an asterisk ( * ) after the method name, or to a specific overload. For example, use the general page when you want to link to the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method without specific parameter types. The asterisk character is encoded as %2A . For example: <xref:System.Object.Equals%2a?displayProperty=nameWithType> links to <xref:System.Object.Equals%2A?displayProperty=nameWithType> To link to a specific overload, add parenthesis after the method name and include the full type name of each parameter. Do not put a space character between the type names or the link won't work. For example: <xref:System.Object.Equals(System.Object,System.Object)?displayProperty=nameWithType> links to <xref:System.Object.Equals(System.Object,System.Object)?displayProperty=nameWithType> Links from includes Because include files are located in another directory, you must use longer relative paths. To link to an article from an include file, use this format: [link text](../articles/folder/article-name.md) Tip The Docs Authoring Pack extension for Visual Studio Code helps you insert relative links and bookmarks correctly without the tedium of figuring out paths. Links in selectors A selector is a navigation component that appears in a docs article as a drop-down list. When a reader selects a value in the drop-down, the browser opens the selected article. Typically the selector list contains links to closely related articles, for example the same subject matter in multiple programming languages or a closely related series of articles. If you have selectors that are embedded in an include, use the following link structure: > [AZURE.SELECTOR-LIST (Dropdown1 | Dropdown2 )] - [(Text1 | Example1 )](../articles/folder/article-name1.md) - [(Text1 | Example2 )](../articles/folder/article-name2.md) - [(Text2 | Example3 )](../articles/folder/article-name3.md) - [(Text2 | Example4 )](../articles/folder/article-name4.md) Reference-style links You can use reference-style links to make your source content easier to read. Reference-style links replace inline link syntax with simplified syntax that allows you to move the long URLs to the end of the article. Here's Daring Fireball 's example: Inline text: I get 10 times more traffic from [Google][1] than from [Yahoo][2] or [MSN][3]. Link references at the end of the article: <!--Reference links in article--> [1]: http://google.com/ [2]: http://search.yahoo.com/ [3]: http://search.msn.com/ Make sure that you include the space after the colon, before the link. When you link to other technical articles, if you forget to include the space, the link will be broken in the published article. Links to pages that are not part of the technical documentation set To link to a page on another Microsoft property (such as a pricing page, SLA page, or anything else that is not a documentation article), use an absolute URL, but omit the locale. The goal here is that links work in GitHub and on the rendered site: [link text](https://azure.microsoft.com/pricing/details/virtual-machines/) Links to third-party sites The best user experience minimizes sending users to another site. So base any links to third-party sites, which we do sometimes need, on this info: Accountability : Link to third-party content when it's the third-party's information to share. For example, it's not Microsoft's place to tell people how to use Android developer tools--that is Google's story to tell. If we need to, we can explain how to use Android developer tools with Azure, but Google should tell the story of how to use their tools. PM signoff : Request that Microsoft sign off on third-party content. By linking to it, we are saying something about our trust in it and our obligation if people follow the instructions. Freshness reviews : Make sure that the third-party info is still current, correct, and relevant, and that the link hasn't changed. Offsite : Make users aware that they are going to another site. If the context does not make that clear, add a qualifying phrase. For example: \"Prerequisites include the Android Developer Tools, which you can download on the Android Studio site.\" Next steps : It's fine to add a link to, say, an MVP blog in a \"Next steps\" section. Again, just make sure that users understand they'll be leaving the site. Legal : We are covered legally under Links to Third Party Sites in the Terms of Use footer on every microsoft.com page. <!-- link references -->"
  },
  "content-authoring/markdown-reference.html": {
    "href": "content-authoring/markdown-reference.html",
    "title": "Markdown reference for docs.microsoft.com | Eaton Docs",
    "keywords": "Docs Markdown reference This article provides an alphabetical reference for writing Markdown for docs.microsoft.com (Docs). Markdown is a lightweight markup language with plain text formatting syntax. Docs supports CommonMark compliant Markdown parsed through the Markdig parsing engine. Docs also supports custom Markdown extensions that provide richer content on the Docs site. You can use any text editor to write Markdown, but we recommend Visual Studio Code with the Docs Authoring Pack . The Docs Authoring Pack provides editing tools and preview functionality that lets you see what your articles will look like when rendered on Docs. Alerts (Note, Tip, Important, Caution, Warning) Alerts are a Markdown extension to create block quotes that render on docs.microsoft.com with colors and icons that indicate the significance of the content. The following alert types are supported: > [!NOTE] > Information the user should notice even if skimming. > [!TIP] > Optional information to help a user be more successful. > [!IMPORTANT] > Essential information required for user success. > [!CAUTION] > Negative potential consequences of an action. > [!WARNING] > Dangerous certain consequences of an action. These alerts look like this on docs.microsoft.com: Note Information the user should notice even if skimming. Tip Optional information to help a user be more successful. Important Essential information required for user success. Caution Negative potential consequences of an action. Warning Dangerous certain consequences of an action. Angle brackets If you use angle brackets in text in your file--for example, to denote a placeholder--you need to manually encode the angle brackets. Otherwise, Markdown thinks that they're intended to be an HTML tag. For example, encode <script name> as &lt;script name&gt; or \\<script name> . Angle brackets don't have to be escaped in text formatted as inline code or in code blocks. Apostrophes and quotation marks If you copy from Word into a Markdown editor, the text might contain \"smart\" (curly) apostrophes or quotation marks. These need to be encoded or changed to basic apostrophes or quotation marks. Otherwise, you end up with things like this when the file is published: Itâ€™s Here are the encodings for the \"smart\" versions of these punctuation marks: Left (opening) quotation mark: &#8220; Right (closing) quotation mark: &#8221; Right (closing) single quotation mark or apostrophe: &#8217; Left (opening) single quotation mark (rarely used): &#8216; Blockquotes Blockquotes are created using the > character: > This is a blockquote. It is usually rendered indented and with a different background color. The preceding example renders as follows: This is a blockquote. It is usually rendered indented and with a different background color. Bold and italic text To format text as bold , enclose it in two asterisks: This text is **bold**. To format text as italic , enclose it in a single asterisk: This text is *italic*. To format text as both bold and italic , enclose it in three asterisks: This text is both ***bold and italic***. Code snippets Docs Markdown supports the placement of code snippets both inline in a sentence and as a separate \"fenced\" block between sentences. For more information, see How to add code to docs . Columns The columns Markdown extension gives Docs authors the ability to add column-based content layouts that are more flexible and powerful than basic Markdown tables, which are only suited for true tabular data. You can add up to four columns, and use the optional span attribute to merge two or more columns. The syntax for columns is as follows: :::row::: :::column span=\"\"::: Content... :::column-end::: :::column span=\"\"::: More content... :::column-end::: :::row-end::: Columns should only contain basic Markdown, including images. Headings, tables, tabs, and other complex structures shouldn't be included. A row can't have any content outside of column. For example, the following Markdown creates one column that spans two column widths, and one standard (no span ) column: :::row::: :::column span=\"2\"::: **This is a 2-span column with lots of text.** Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vestibulum mollis nunc ornare commodo. Nullam ac metus imperdiet, rutrum justo vel, vulputate leo. Donec rutrum non eros eget consectetur. :::column-end::: :::column span=\"\"::: **This is a single-span column with an image in it.** ![Doc.U.Ment](media/markdown-reference/document.png) :::column-end::: :::row-end::: This renders as follows: This is a 2-span column with lots of text. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vestibulum mollis nunc ornare commodo. Nullam ac metus imperdiet, rutrum justo vel, vulputate leo. Donec rutrum non eros eget consectetur. This is a single-span column with an image in it. Headings Docs supports six levels of Markdown headings: # This is a first level heading (H1) ## This is a second level heading (H2) ... ###### This is a sixth level heading (H6) There must be a space between the last # and heading text. Each Markdown file must have one and only one H1 heading. The H1 heading must be the first content in the file after the YML metadata block. H2 headings automatically appear in the right-hand navigating menu of the published file. Lower-level headings don't appear, so use H2s strategically to help readers navigate your content. HTML headings, such as <h1> , aren't recommended, and in some cases will cause build warnings. You can link to individual headings in a file via bookmark links . HTML Although Markdown supports inline HTML, HTML isn't recommended for publishing to Docs, and except for a limited list of values will cause build errors or warnings. Images The following file types are supported by default for images: .jpg .png Standard conceptual images (default Markdown) The basic Markdown syntax to embed an image is: ![<alt text>](<folderPath>) Example: ![alt text for image](../images/Introduction.png) Where <alt text> is a brief description of the image and <folder path> is a relative path to the image. Alternate text is required for screen readers for the visually impaired. It's also useful if there's a site bug where the image can't render. Underscores in alt text aren't rendered properly unless you escape them by prefixing them with a backslash ( \\_ ). However, don't copy file names for use as alt text. For example, instead of this: ![ADextension_2FA_Configure_Step4](./media/bogusfilename/ADextension_2FA_Configure_Step4.PNG) Write this: ![Active Directory extension for two-factor authentication, step 4: Configure](./media/bogusfilename/ADextension_2FA_Configure_Step4.PNG) Standard conceptual images (Docs Markdown) The Docs custom :::image::: extension supports standard images, complex images, and icons. For standard images, the older Markdown syntax will still work, but the new extension is recommended because it supports more powerful functionality, such as specifying a localization scope that's different from the parent topic. Other advanced functionality, such as selecting from the shared image gallery instead of specifying a local image, will be available in the future. The new syntax is as follows: :::image type=\"content\" source=\"<folderPath>\" alt-text=\"<alt text>\"::: If type=\"content\" (the default), both source and alt-text are required. Complex images with long descriptions You can also use this extension to add an image with a long description that is read by screen readers but not rendered visually on the published page. Long descriptions are an accessibility requirement for complex images, such as graphs. The syntax is the following: :::image type=\"complex\" source=\"<folderPath>\" alt-text=\"<alt text>\"::: <long description here> :::image-end::: If type=\"complex\" , source , alt-text , a long description, and the :::image-end::: tag are all required. Specifying loc-scope Sometimes the localization scope for an image is different from that of the article or module that contains it. This can cause a bad global experience: for example, if a screenshot of a product is accidentally localized into a language the product isn't available in. To prevent this, you can specify the optional loc-scope attribute in images of types content and complex . Icons The image extension supports icons, which are decorative images and should not have alt text. The syntax for icons is: :::image type=\"icon\" source=\"<folderPath>\"::: If type=\"icon\" , only source should be specified. Included Markdown files Where markdown files need to be repeated in multiple articles, you can use an include file. The includes feature instructs Docs to replace the reference with the contents of the include file at build time. You can use includes in the following ways: Inline: Reuse a common text snippet inline with within a sentence. Block: Reuse an entire Markdown file as a block, nested within a section of an article. An inline or block include file is a Markdown (.md) file. It can contain any valid Markdown. Include files are typically located in a common includes subdirectory, in the root of the repository. When the article is published, the included file is seamlessly integrated into it. Includes syntax Block include is on its own line: [!INCLUDE [<title>](<filepath>)] Inline include is within a line: Text before [!INCLUDE [<title>](<filepath>)] and after. Where <title> is the name of the file and <filepath> is the relative path to the file. INCLUDE must be capitalized and there must be a space before the <title> . Here are requirements and considerations for include files: Use block includes for significant amounts of content--a paragraph or two, a shared procedure, or a shared section. Do not use them for anything smaller than a sentence. Includes won't be rendered in the GitHub rendered view of your article, because they rely on Docs extensions. They'll be rendered only after publication. Ensure that all the text in an include file is written in complete sentences or phrases that do not depend on preceding text or following text in the article that references the include. Ignoring this guidance creates an untranslatable string in the article. Don't embed include files within other include files. Place media files in a media folder that's specific to the include subdirectory--for instance, the <repo> /includes/media folder. The media directory should not contain any images in its root. If the include does not have images, a corresponding media directory is not required. As with regular articles, don't share media between include files. Use a separate file with a unique name for each include and article. Store the media file in the media folder that's associated with the include. Don't use an include as the only content of an article. Includes are meant to be supplemental to the content in the rest of the article. Links For information on syntax for links, see Use links in documentation . Lists (Numbered, Bulleted, Checklist) Numbered list To create a numbered list, you can use all 1s. The numbers are rendered in ascending order as a sequential list when published. For increased source readability, you can increment your lists manually. Don't use letters in lists, including nested lists. They don't render correctly when published to Docs. Nested lists using numbers will render as lowercase letters when published. For example: 1. This is 1. a parent numbered list 1. and this is 1. a nested numbered list 1. (fin) This renders as follows: This is a parent numbered list and this is a nested numbered list (fin) Bulleted list To create a bulleted list, use - or * followed by a space at the beginning of each line: - This is - a parent bulleted list - and this is - a nested bulleted list - All done! This renders as follows: This is a parent bulleted list and this is a nested bulleted list All done! Whichever syntax you use, - or * , use it consistently within an article. Checklist Checklists are available for use on Docs via a custom Markdown extension: > [!div class=\"checklist\"] > * List item 1 > * List item 2 > * List item 3 This example renders on Docs like this: List item 1 List item 2 List item 3 Use checklists at the beginning or end of an article to summarize \"What will you learn\" or \"What have you learned\" content. Do not add random checklists throughout your articles. Next step action You can use a custom extension to add a next step action button to Docs pages. The syntax is as follows: > [!div class=\"nextstepaction\"] > [button text](link to topic) For example: > [!div class=\"nextstepaction\"] > [Learn about adding code to articles](code-in-docs.md) This renders as follows: Learn about adding code to articles You can use any supported link in a next step action, including a Markdown link to another web page. In most cases, the next action link will be a relative link to another file in the same docset. Non-localized strings You can use the custom no-loc Markdown extension to identify strings of content that you would like the localization process to ignore. All strings called out will be case-sensitive; that is, the string must match exactly to be ignored for localization. To mark an individual string as non-localizable, use this syntax: :::no-loc text=\"String\"::: For example, in the following, only the single instance of Document will be ignored during the localization process: # Heading 1 of the Document Markdown content within the :::no-loc text=\"Document\":::. The are multiple instances of Document, document, and documents. Note Use \\ to escape special characters: Lorem :::no-loc text=\"Find a \\\"Quotation\\\"\"::: Ipsum. You can also use metadata in the YAML header to mark all instances of a string within the current Markdown file as non-localizable: author: cillroy no-loc: [Global, Strings, to be, Ignored] Note The no-loc metadata is not supported as global metadata in docfx.json file. The localization pipeline doesn't read the docfx.json file, so the no-loc metadata must be added into each individual source file. In the following example, both in the metadata title and the Markdown header the word Document will be ignored during the localization process. In the metadata description and the Markdown main content the word document is localized, because it does not start with a capital D . --- title: Title of the Document author: author-name description: Description for the document no-loc: [Title, Document] --- # Heading 1 of the Document Markdown content within the document. <!-- commenting out for now because no one knows what this means ## Section definition You might need to define a section. This syntax is mostly used for code tables. See the following example: ```` > [!div class=\"tabbedCodeSnippets\" data-resources=\"OutlookServices.Calendar\"] > ```cs > <cs code text> > ``` > ```javascript > <js code text> > ``` ```` The preceding blockquote Markdown text will be rendered as: > [!div class=\"tabbedCodeSnippets\" data-resources=\"OutlookServices.Calendar\"] > ```cs > <cs code text> > ``` > ```javascript > <js code text> > ``` --> Selectors Selectors are UI elements that let the user switch between multiple flavors of the same article. They are used in some doc sets to address differences in implementation across technologies or platforms. Selectors are typically most applicable to our mobile platform content for developers. Because the same selector Markdown goes in each article file that uses the selector, we recommend placing the selector for your article in an include file. Then you can reference that include file in all your article files that use the same selector. There are two types of selectors: a single selector and a multi-selector. Single selector > [!div class=\"op_single_selector\"] > - [Universal Windows](../articles/notification-hubs-windows-store-dotnet-get-started/) > - [Windows Phone](../articles/notification-hubs-windows-phone-get-started/) > - [iOS](../articles/notification-hubs-ios-get-started/) > - [Android](../articles/notification-hubs-android-get-started/) > - [Kindle](../articles/notification-hubs-kindle-get-started/) > - [Baidu](../articles/notification-hubs-baidu-get-started/) > - [Xamarin.iOS](../articles/partner-xamarin-notification-hubs-ios-get-started/) > - [Xamarin.Android](../articles/partner-xamarin-notification-hubs-android-get-started/) ... will be rendered like this: Universal Windows Windows Phone iOS Android Kindle Baidu Xamarin.iOS Xamarin.Android Multi-selector > [!div class=\"op_multi_selector\" title1=\"Platform\" title2=\"Backend\"] > - [(iOS | .NET)](./mobile-services-dotnet-backend-ios-get-started-push.md) > - [(iOS | JavaScript)](./mobile-services-javascript-backend-ios-get-started-push.md) > - [(Windows universal C# | .NET)](./mobile-services-dotnet-backend-windows-universal-dotnet-get-started-push.md) > - [(Windows universal C# | Javascript)](./mobile-services-javascript-backend-windows-universal-dotnet-get-started-push.md) > - [(Windows Phone | .NET)](./mobile-services-dotnet-backend-windows-phone-get-started-push.md) > - [(Windows Phone | Javascript)](./mobile-services-javascript-backend-windows-phone-get-started-push.md) > - [(Android | .NET)](./mobile-services-dotnet-backend-android-get-started-push.md) > - [(Android | Javascript)](./mobile-services-javascript-backend-android-get-started-push.md) > - [(Xamarin iOS | Javascript)](./partner-xamarin-mobile-services-ios-get-started-push.md) > - [(Xamarin Android | Javascript)](./partner-xamarin-mobile-services-android-get-started-push.md) ... will be rendered like this: (iOS | .NET) (iOS | JavaScript) (Windows universal C# | .NET) (Windows universal C# | Javascript) (Windows Phone | .NET) (Windows Phone | Javascript) (Android | .NET) (Android | Javascript) (Xamarin iOS | Javascript) (Xamarin Android | Javascript) Subscript and superscript You should only use subscript or superscript when necessary for technical accuracy, such as when writing about mathematical formulas. Don't use them for non-standard styles, such as footnotes. For both subscript and superscript, use HTML: Hello <sub>This is subscript!</sub> This renders as follows: Hello This is subscript! Goodbye <sup>This is superscript!</sup> This renders as follows: Goodbye This is superscript! Tables The simplest way to create a table in Markdown is to use pipes and lines. To create a standard table with a header, follow the first line with dashed line: |This is |a simple |table header| |----------|-----------|------------| |table |data |here | |it doesn't|actually |have to line up nicely!| This renders as follows: This is a simple table header table data here it doesn't actually have to line up nicely! You can align the columns by using colons: | Fun | With | Tables | | :------------------- | -------------------: |:---------------:| | left-aligned column | right-aligned column | centered column | | $100 | $100 | $100 | | $10 | $10 | $10 | | $1 | $1 | $1 | Renders as follows: Fun With Tables left-aligned column right-aligned column centered column $100 $100 $100 $10 $10 $10 $1 $1 $1 Tip The Docs Authoring Extension for VS Code makes it easy to add basic Markdown tables! You can also use an online table generator . Line breaks within words in any table cell Long words in a Markdown table might make the table expand to the right navigation and become unreadable. You can solve that by allowing Docs rendering to automatically insert line breaks within words when needed. Just wrap up the table with the custom class [!div class=\"mx-tdBreakAll\"] . Here is a Markdown sample of a table with three rows that will be wrapped by a div with the class name mx-tdBreakAll . > [!div class=\"mx-tdBreakAll\"] > |Name|Syntax|Mandatory for silent installation?|Description| > |-------------|----------|---------|---------| > |Quiet|/quiet|Yes|Runs the installer, displaying no UI and no prompts.| > |NoRestart|/norestart|No|Suppresses any attempts to restart. By default, the UI will prompt before restart.| > |Help|/help|No|Provides help and quick reference. Displays the correct use of the setup command, including a list of all options and behaviors.| It will be rendered like this: Name Syntax Mandatory for silent installation? Description Quiet /quiet Yes Runs the installer, displaying no UI and no prompts. NoRestart /norestart No Suppresses any attempts to restart. By default, the UI will prompt before restart. Help /help No Provides help and quick reference. Displays the correct use of the setup command, including a list of all options and behaviors. Line breaks within words in second column table cells You might want line breaks to be automatically inserted within words only in the second column of a table. To limit the breaks to the second column, apply the class mx-tdCol2BreakAll by using the div wrapper syntax as shown earlier. Data matrix tables A data matrix table has both a header and a weighted first column, creating a matrix with an empty cell in the top left. Docs has custom Markdown for data matrix tables: | |Header 1 |Header 2| |------------------|---------|--------| |**First column A**|Cell 1A |Cell 2A | |**First column B**|Cell 1B |Cell 2B | Every entry in the first column must be styled as bold ( **bold** ); otherwise the tables won't be accessible for screen readers or valid for Docs. HTML Tables HTML tables aren't recommended for docs.microsoft.com. They aren't human readable in the source - which is a key principle of Markdown."
  },
  "content-authoring/style-quick-start.html": {
    "href": "content-authoring/style-quick-start.html",
    "title": "Docs Style guide - Quick start | Eaton Docs",
    "keywords": "Docs style and voice quick start This quick start is a brief guide to writing technical content for publication on docs.microsoft.com. These guidelines apply whether you are creating new documentation or updating existing documentation. Best practices: Check the spelling and grammar in your articles, even if you have to copy and paste into Microsoft Word to check. Use a casual and friendly voice—like you're talking to another person one-on-one. Use simple sentences. Easy-to-read sentences mean the reader can quickly use the guidance you share. Use the Microsoft voice principles We aspire to follow these principles when we write technical content for docs.microsoft.com . We might not always get there, but we need to keep trying! Focus on the intent : Customers have a specific purpose in mind when they consult our documentation. Before you begin writing, clearly determine who the customer is and what task he or she is trying to do. Then, write your article to help that specific customer do that specific task. Use everyday words : Try to use natural language, the words your customers use. Be less formal but not less technical. Provide examples that explain new concepts. Write concisely : Don't waste words. Be affirmative and don't use extra words or lots of qualifiers. Keep sentences short and concise. Keep your article focused. If a task has a qualifier, put it at the beginning of the sentence or paragraph. Also, keep the number of notes to a minimum. Use a screenshot when it can save words. Make your article easy to scan : Put the most important things first. Use sections to chunk long procedures into more manageable groups of steps. (Procedures with more than 12 steps are probably too long.) Use a screenshot when it adds clarity. Show empathy : Use a supportive tone in the article, and keep disclaimers to a minimum. Honestly call out areas that will be frustrating to customers. Make sure the article focuses on what matters to customers; don't just give a technical lecture. Consider localization and machine translation Our technical articles are translated into several languages, and some are modified for particular markets or geographies. People might also use machine translation on the web to read the technical articles. So, keep the following guidelines in mind when you're writing: Make sure the article contains no grammar, spelling, or punctuation errors : This is something we should do in general. Some Markdown editors (such as MarkdownPad 2.0) have a basic spell checker, but it's a good practice to paste the rendered HTML content from the article into Word, which has a more robust spell and grammar checker. Make your sentences as short as possible : Compound sentences or chains of clauses make translation difficult. Split up sentences if you can do it without being too redundant or sounding weird. We don't want articles written in unnatural language either. Use simple and consistent sentence construction : Consistency is better for translation. Avoid parentheticals and asides, and have the subject as near the beginning of the sentence as possible. Check out a few published articles. If an article has a friendly, easy-to-read style, use it as a model. Use consistent wording and capitalization : Again, consistency is key. Do not capitalize a word if it isn't at the start of a sentence or it isn't a proper noun. Include the \"small words\" : Words that we consider small and unimportant in English because they are understood for context (such as \"a,\" \"the,\" \"that,\" and \"is\") are crucial for machine translation. Be sure to include them. Other style and voice issues to watch for Don't break up steps with commentary or asides. For steps that include code snippets, put additional information about the step into the code as comments. This reduces the amount of text that people have to read through. The key information gets copied into the code project to remind people of what the code is doing when they refer to it later. Use sentence case for all titles and headings. Use \"sign in\" and not \"log in.\" For more guidelines, see the Microsoft Writing Style Guide . Localized documentation If you are contributing to localized documentation, refer to the Microsoft Language Portal . For localization guidelines, information on language style and usage in technical publications, and information on market-specific data formats, download the style guide in your language. For Microsoft localized terminology, search for product-specific approved terminology or download the Microsoft Terminology Collection in your language. To learn more about localization, see \"Global communications\" in the Microsoft Writing Style Guide ."
  },
  "content-authoring/text-formatting-guidelines.html": {
    "href": "content-authoring/text-formatting-guidelines.html",
    "title": "Text formatting guidelines | Eaton Docs",
    "keywords": "Text formatting guidelines Consistent and appropriate use of bold, italic, and code style for text elements improves readability and helps avoid misunderstandings. Bold Use bold for UI elements, such as menu selections, dialog box names, and input field names. Examples This : In Solution Explorer , right-click the project node, and then select Add > New Item . Not this : In Solution Explorer, right-click the project node, and then select Add > New Item. Not this : In Solution Explorer , right-click the project node, and then select Add > New Item . Italics Use italics for: Introducing new terms along with a definition or explanation. File names, folder names, paths. User input. Examples This : In App Service, an app runs in an App Service plan . An App Service plan defines a set of compute resources for a web app to run on. Not this : In App Service, an app runs in an \"App Service plan.\" An App Service plan defines a set of compute resources for a web app to run on. This : Replace the code in HttpTriggerCSharp.cs with the following code. Not this : Replace the code in HttpTriggerCSharp.cs with the following code. This : Enter ContosoUniversity for the Name , and then select Add . Not this : Enter \"ContosoUniversity\" for the Name , and then select Add . Code style Use code style for: Code elements, such as method names, property names, and language keywords. SQL commands NuGet package names Command-line commands Database table and column names Resource names that should not be localized (such as virtual machine names) URLs that you don't want to be clickable Why? Older style guides specify bold for many of these text elements. However, most articles are localized, and code style tells the translator to leave that part of the text untranslated. Code style can be inline (surrounded by `) or fenced code blocks (surrounded by ```) that span multiple lines. Put longer code snippets and paths in fenced code blocks. Examples using inline styles This : By default, the Entity Framework interprets a property that's named Id or ClassnameID as the primary key. Not this : By default, the Entity Framework interprets a property that's named Id or ClassnameID as the primary key. This : The Microsoft.EntityFrameworkCore package provides runtime support for EF Core. Not this : The Microsoft.EntityFrameworkCore package provides runtime support for EF Core. Examples of fenced code blocks This : No commands are sent to the database by statements that just change an IQueryable , such as the following code: ```csharp var students = context.Students.Where(s => s.LastName == \"Davolio\") ``` Not this : No commands are sent to the database by statements that just change an IQueryable , such as var students = context.Students.Where(s => s.LastName == \"Davolio\") . This : For example, to run the Get-ServiceLog.ps1 script in the C:\\Scripts directory, type: ```powershell C:\\Scripts\\Get-ServiceLog.ps1 ``` Not this : For example, to run the Get-ServiceLog.ps1 script in the C:\\Scripts directory, type: \"C:\\Scripts\\Get-ServiceLog.ps1.\" All fenced code blocks must have an approved language tag. For a list of support language tags, see How to include code in docs . Headings and link text Don't apply an inline style such as italics, bold, or code to headings or hyperlink text. Why? People rely on standard hyperlink text to identify text elements as clickable links. Styling a link as code, for example, can obscure the fact that the text is a link. Headings have their own styles and mixing other styles in them looks bad. Examples This : The function.json file is generated by the NuGet package Microsoft.NET.Sdk.Functions . Not this : The function.json file is generated by the NuGet package Microsoft.NET.Sdk.Functions . This : ### The Microsoft.NET.Sdk.Functions package Not this : ### The `Microsoft.NET.Sdk.Functions` package Keys and keyboard shortcuts When referring to keys or key combinations, follow these conventions: Capitalize the first letter of key names. Don't apply an inline style such as italics, bold, or code. Use \"+\" to join keys that are pressed at the same time. Examples This : Select Alt+Ctrl+S. Not this : Press ALT+CTRL+S . Not this : Hit ALT+CTRL+S . For more information, see Describing interactions with UI . Exceptions Style guidelines aren't rigid rules. In contexts where they harm readability, do something different. For example, an HTML table with mostly code elements might look too busy with code styling everywhere. You might choose bold styling in that context. If you choose an alternate text style where code is normally called for, make sure it's okay for the text to be translated in localized versions of the article. Code is the only style that automatically prevents translation. For scenarios where you want to prevent localization without using code style, see Non-localized strings ."
  },
  "Dynamics365/Guides/BestPractices.html": {
    "href": "Dynamics365/Guides/BestPractices.html",
    "title": "Guides Best Practices | Eaton Docs",
    "keywords": "Guides Best Practices Naming Convention Choose Guides Name as the short name for the procedure/machine Choose the File names (image/video/3D files) as: <Guides name >-<Task#>-<Step#> Videos showing D365 Guides best practices Watch a video about PC authoring Watch a video about HoloLens authoring on HoloLens1 D365 Guides How To Videos Note Frequently Asked Questions"
  },
  "Dynamics365/Guides/Business-User/help-hub.html": {
    "href": "Dynamics365/Guides/Business-User/help-hub.html",
    "title": "YamlMime:Hub | Eaton Docs",
    "keywords": "YamlMime:Hub title: Azure DevOps documentation summary: Collaborate on software development through source control, work tracking, and continuous integration and delivery, both on-premises and in the cloud! brand: azure metadata: title: Azure DevOps documentation description: Collaborate on software development through source control, work tracking, and continuous integration and delivery, both on-premises and in the cloud! ms.prod: devops ms.topic: hub-page author: KathrynEE ms.author: kaelli ms.date: 09/30/2019 highlightedContent section (optional) Maximum of 8 items highlightedContent: itemType: architecture | concept | deploy | download | get-started | how-to-guide | learn | overview | quickstart | reference | tutorial | video | whats-new items: # Card - title: What is Azure DevOps? itemType: overview url: ./user-guide/what-is-azure-devops.md # Card - title: What's new in Azure DevOps? itemType: whats-new url: /azure/devops/release-notes/index # Card - title: What's new in Azure DevOps documentation? itemType: whats-new url: /azure/devops/release-notes/docswhatsnew/index # Card - title: Create your first pipeline itemType: how-to-guide url: ./pipelines/create-first-pipeline.md # Card - title: Get started for free itemType: how-to-guide url: ./user-guide/sign-up-invite-teammates.md # Card - title: Connect to a project itemType: how-to-guide url: ./organizations/projects/connect-to-projects.md # Card - title: Authenticate access with personal access tokens itemType: how-to-guide url: ./organizations/accounts/use-personal-access-tokens-to-authenticate.md productDirectory section (optional) productDirectory: title: Azure DevOps Products items: # Card - title: Azure Boards # imageSrc should be square in ratio with no whitespace imageSrc: ./media/index/DevOpsIconBoards96.svg links: - url: ./boards/get-started/what-is-azure-boards.md text: What is Azure Boards? - url: ./boards/work-items/guidance/choose-process.md text: Choose a process - url: ./boards/backlogs/create-your-backlog.md text: Create your backlog - url: ./boards/get-started/plan-track-work.md text: Plan & track work - url: ./boards/backlogs/office/bulk-add-modify-work-items-excel.md text: Bulk add or modify work items # Card - title: Azure Repos imageSrc: ./media/index/DevOpsIconRepos96.svg links: - url: ./repos/get-started/what-is-repos.md text: What is Azure Repos? - url: ./repos/git/pull-requests-overview.md text: Get started with Git & Visual Studio - url: ./repos/git/pull-requests-overview.md text: Review code with pull requests - url: ./repos/git/clone.md text: Clone an existing Git repo # Card - title: Azure Pipelines imageSrc: ./media/index/DevOpsIconPipelines96.svg links: - url: ./pipelines/get-started/what-is-azure-pipelines.md text: What is Azure Pipelines? - url: ./pipelines/get-started/pipelines-get-started.md text: Use Azure Pipelines - url: ./pipelines/create-first-pipeline.md text: Create your first pipeline - url: ./pipelines/yaml-schema.md text: YAML Schema # Card - title: Azure Test Plans imageSrc: media/index/DevOpsIconTestPlans96.svg links: - url: ./test/overview.md text: What is Azure Test Plans? - url: ./test/create-a-test-plan.md text: Create a test plan - url: ./test/run-automated-tests-from-test-hub.md text: Run automated tests - url: ./test/create-test-cases.md text: Create manual tests # Card - title: Azure Artifacts imageSrc: ./media/index/DevOpsIconArtifacts96.svg links: - url: ./artifacts/overview.md text: What is Azure Artifacts? - url: ./artifacts/get-started-nuget.md text: NuGet - url: ./artifacts/get-started-npm.md text: Use npm to store JavaScript packages - url: ./artifacts/get-started-maven.md text: Maven packages # Card - title: Azure DevOps Server imageSrc: https://docs.microsoft.com/media/common/i_server.svg links: - url: ./user-guide/about-azure-devops-services-tfs.md text: Azure DevOps Services vs. Azure DevOps Server - url: /azure/devops/server/install/get-started text: Install - url: /azure/devops/server/upgrade/get-started text: Upgrade - url: ./migrate/migrate-from-tfs.md text: Migrate - url: /azure/devops/server/admin/admin-quick-ref text: Manage tools: title: Build & deploy your apps items: - title: ASP.NET imageSrc: ./pipelines/media/index/logo_net.svg url: ./pipelines/apps/aspnet/build-aspnet-4.md - title: .NET Core imageSrc: ./pipelines/media/index/logo_aspnetcore.svg url: ./pipelines/ecosystems/dotnet-core.md - title: C/C++ with GCC imageSrc: https://docs.microsoft.com/media/logos/logo_Cplusplus.svg url: ./pipelines/apps/c-cpp/gcc.md - title: C/C++ with VC++ imageSrc: https://docs.microsoft.com/media/logos/logo_visual-studio.svg url: ./pipelines/apps/windows/cpp.md - title: Docker imageSrc: ./pipelines/media/index/logo_dockercontainer.svg url: ./pipelines/tasks/build/docker.md - title: Java imageSrc: https://docs.microsoft.com/media/logos/logo_java.svg url: ./pipelines/ecosystems/java.md - title: JavaScript & Node.js imageSrc: ./pipelines/media/index/logo_nodejs.svg url: ./pipelines/ecosystems/javascript.md - title: Python imageSrc: https://docs.microsoft.com/media/logos/logo_python.svg url: ./pipelines/ecosystems/python.md - title: Azure Web Apps imageSrc: https://docs.microsoft.com/azure/media/index/app-service-web.svg url: ./pipelines/targets/webapp.md - title: Windows VM imageSrc: https://docs.microsoft.com/azure/media/index/virtualmachine.svg url: ./pipelines/apps/cd/deploy-webdeploy-iis-deploygroups.md - title: Kubernetes imageSrc: ./pipelines/media/index/logo_kubernetes.svg url: ./pipelines/ecosystems/kubernetes/deploy.md - title: Azure SQL Database imageSrc: https://docs.microsoft.com/azure/media/index/sqldatabase.svg url: ./pipelines/targets/azure-sqldb.md additionalContent section (optional) additionalContent: Supports up to 3 sections sections: - title: Get started items: # Card - title: Key concepts links: - url: ./project/navigation/index.md text: Web portal navigation - url: ./user-guide/work-team-explorer.md text: Team Explorer navigation - url: ./user-guide/tools.md text: Supported tools & clients - url: ./user-guide/services.md text: Supported features & services - url: ./organizations/security/get-started-stakeholder.md text: Stakeholder access - url: ./get-started/index.yml text: \"See more >\" # Card - title: Reporting links: - text: Dashboards, charts, reports, & widgets url: ./report/dashboards/overview.md - text: Widget catalog url: ./report/dashboards/widget-catalog.md - text: Work tracking query-based charts url: ./report/dashboards/charts.md - text: What are Analytic views? url: ./report/powerbi/what-are-analytics-views.md - url: ./report/index.yml text: \"See more >\" # Card - title: Collaborate links: - url: ./project/wiki/wiki-create-repo.md text: Create a wiki for your project - url: ./project/wiki/markdown-guidance.md text: Markdown syntax guidance - url: ./organizations/public/create-public-project.md text: Create a public project - url: ./boards/work-items/follow-work-items.md text: Follow work - url: ./project/navigation/set-favorites.md text: Set favorites - url: /azure/devops/project/index text: \"See more >\" # Card - title: GitHub integration links: - url: ./boards/github/connect-to-github.md text: Azure Boards & GitHub - url: ./pipelines/create-first-pipeline.md text: Azure Pipelines & GitHub - url: /azure/devops-project/azure-devops-project-github text: Azure DevOps Projects & GitHub - title: Tools & utilities items: # Card - title: Settings, Security, & Usage links: - text: Security, access, & identity url: ./organizations/security/about-security-identity.md - text: Permissions & groups url: ./organizations/security/about-permissions.md - text: Access levels url: ./organizations/security/access-levels.md - text: Billing url: ./organizations/billing/overview.md - text: User preferences url: ./organizations/settings/set-your-preferences.md - text: Organizations url: ./organizations/accounts/organization-management.md - text: Projects url: ./organizations/projects/index.md - text: Teams url: ./organizations/settings/scale/index.md - text: Repos, pipelines, & test url: ./pipelines/agents/pools-queues.md?toc=/azure/devops/organizations/toc.json&bc=/azure/devops/reference/organizations/toc.json - text: Notifications url: ./notifications/index.md?toc=/azure/devops/organizations/toc.json&bc=/azure/devops/reference/organizations/toc.json - text: Auditing url: ./organizations/audit/azure-devops-auditing.md # Card - title: Azure Boards settings links: - text: Configure & customize Azure Boards url: ./boards/configure-customize.md?toc=/azure/devops/reference/toc.json&bc=/azure/devops/reference/breadcrumb/toc.json - text: Compare processes url: ./boards/work-items/guidance/choose-process.md?toc=/azure/devops/reference/toc.json&bc=/azure/devops/reference/breadcrumb/toc.json - text: \"Area & iteration paths\" url: ./organizations/settings/about-areas-iterations.md?toc=/azure/devops/reference/toc.json&bc=/azure/devops/reference/breadcrumb/toc.json - text: Customize Inherited process url: ./organizations/settings/work/inheritance-process-model.md?toc=/azure/devops/reference/toc.json&bc=/azure/devops/reference/breadcrumb/toc.json - text: On-premises XML process model url: ./reference/on-premises-xml-process-model.md?toc=/azure/devops/reference/toc.json&bc=/azure/devops/reference/breadcrumb/toc.json - text: Hosted XML process model url: ./organizations/settings/work/hosted-xml-process-model.md?toc=/azure/devops/reference/toc.json&bc=/azure/devops/reference/breadcrumb/toc.json # Card - title: Marketplace & extensibility links: - text: Discover extensions url: ./marketplace/overview.md - text: Develop extensions url: ./extend/get-started/node.md - text: Integrate applications url: ./integrate/index.md - text: Service hooks url: ./service-hooks/overview.md # Card - title: Developer resources links: - text: Command line interface url: ./cli/index.md - text: REST APIs url: /rest/api/vsts/ - text: DevOps resource center url: https://docs.microsoft.com/azure/devops/learn/ footer (optional) footer: \" Blogs - Twitter - Stack Overflow - Issue Reporting - Developer Community - Service Status \""
  },
  "Dynamics365/Guides/Business-User/Quickstart.html": {
    "href": "Dynamics365/Guides/Business-User/Quickstart.html",
    "title": "Overview of Dynamics 365 Guides | Eaton Docs",
    "keywords": "Overview of Dynamics 365 Guides Get started with Dynamics 365 Guides Quick Concept & Reference Links Overview of authoring a guide in Dynamics 365 Guides Overview of operating a guide in Dynamics 365 Guides How to make a great mixed reality guide How to share guides with Access Teams Share Guides with user or access teams Know Issues Setting Up Authoring Environment on Eaton PC On your computer Search for “Microsoft Store” and then click to open it Note: If Microsoft store is not working correctly then raise an ITSC ticket. Now, search for “Microsoft Dynamics 365 Guides” and click on it. On next screen, click on install button to install it Guides Authoring Process How to use D365 Guides in production environment on PC? You will use your own Eaton email ID (like anujprasad@eaton.com) to login to Guides on PC and do the authoring on PC. For authoring/operate mode on HL you will use HoloLens-VEH-<Site name>-1@Eaton.onmicrosoft.com account to auto login to Guides Once you are login into Guides select the instance with name – “Mixed Reality - Prod” Create New Guide and import all the assets that describes a step and then share the Guide & assets with corresponding HL user account for your respective site using the details described in section – “How to share a Guide or an asset (Image/video/3D parts)” How to share a Guide or an asset (Image/video/3D parts) to Access Team on PC Authoring on PC will have one additional step that needs to be done – Whenever you create a NEW Guides or add any NEW assets (such as pictures/videos/custom 3D model) to existing guides you will have to share that Guides/asset with your site corresponding Access Team (XS Tm) – “VEH-<Site name>-XSTm”. Open this this link on web browser on PC (Click Here) Then follow the below steps highlighted in red (in below images) in the order 1, 2 ,3 etc… till 11, in order to share Guides or any library content such as 3D, Images and Videos with HL user account & other PC authors of your site (Please Note: You can use the same procedure to share 3D, Images & Video that you find in the left hand side menu just below Guides highlighted with numeric 1 in red in below image) Steps description Select the asset that needs to be shared (Guides/3D/Images/Videos) – In above example screenshot “Guides” is selected Select the active object you want to share – In above example screenshot “Example Guide” is selected On the top menu click on “Share” button, In the Share guide window that opens, select the option – “Add User/Team” In the next screen called “Look Up Records”, select “Team” in “look for” field/filter Again, in the same screen “Look Up Records”, select “All User Access Team in “look in” field/filter Select the checkbox beside your site access team name. In above screen shot it’s showing – “VEH-Athens-XSTm” as an example Click on select button Click on Add button Give user follow permission by selecting the checkboxes for – “Read”, “Write”, “Append”, “Assign” & “Share” Click on Share button. Done How to use D365 Guides in production environment on HoloLens? Guides Best Practices Videos showing D365 Guides best practices Watch a video about PC authoring Watch a video about HoloLens authoring on HoloLens1 D365 Guides How To Videos Naming Convention Choose Guides Name as the short name for the procedure/machine Choose the File names (image/video/3D files) as: <Guides name ><Machine Name>-<Task#>-<Step#>"
  },
  "Dynamics365/Guides/Developer/help-hub.html": {
    "href": "Dynamics365/Guides/Developer/help-hub.html",
    "title": "YamlMime:Hub | Eaton Docs",
    "keywords": "YamlMime:Hub title: Azure DevOps documentation summary: Collaborate on software development through source control, work tracking, and continuous integration and delivery, both on-premises and in the cloud! brand: azure metadata: title: Azure DevOps documentation description: Collaborate on software development through source control, work tracking, and continuous integration and delivery, both on-premises and in the cloud! ms.prod: devops ms.topic: hub-page author: KathrynEE ms.author: kaelli ms.date: 09/30/2019 highlightedContent section (optional) Maximum of 8 items highlightedContent: itemType: architecture | concept | deploy | download | get-started | how-to-guide | learn | overview | quickstart | reference | tutorial | video | whats-new items: # Card - title: What is Azure DevOps? itemType: overview url: ./user-guide/what-is-azure-devops.md # Card - title: What's new in Azure DevOps? itemType: whats-new url: /azure/devops/release-notes/index # Card - title: What's new in Azure DevOps documentation? itemType: whats-new url: /azure/devops/release-notes/docswhatsnew/index # Card - title: Create your first pipeline itemType: how-to-guide url: ./pipelines/create-first-pipeline.md # Card - title: Get started for free itemType: how-to-guide url: ./user-guide/sign-up-invite-teammates.md # Card - title: Connect to a project itemType: how-to-guide url: ./organizations/projects/connect-to-projects.md # Card - title: Authenticate access with personal access tokens itemType: how-to-guide url: ./organizations/accounts/use-personal-access-tokens-to-authenticate.md productDirectory section (optional) productDirectory: title: Azure DevOps Products items: # Card - title: Azure Boards # imageSrc should be square in ratio with no whitespace imageSrc: ./media/index/DevOpsIconBoards96.svg links: - url: ./boards/get-started/what-is-azure-boards.md text: What is Azure Boards? - url: ./boards/work-items/guidance/choose-process.md text: Choose a process - url: ./boards/backlogs/create-your-backlog.md text: Create your backlog - url: ./boards/get-started/plan-track-work.md text: Plan & track work - url: ./boards/backlogs/office/bulk-add-modify-work-items-excel.md text: Bulk add or modify work items # Card - title: Azure Repos imageSrc: ./media/index/DevOpsIconRepos96.svg links: - url: ./repos/get-started/what-is-repos.md text: What is Azure Repos? - url: ./repos/git/pull-requests-overview.md text: Get started with Git & Visual Studio - url: ./repos/git/pull-requests-overview.md text: Review code with pull requests - url: ./repos/git/clone.md text: Clone an existing Git repo # Card - title: Azure Pipelines imageSrc: ./media/index/DevOpsIconPipelines96.svg links: - url: ./pipelines/get-started/what-is-azure-pipelines.md text: What is Azure Pipelines? - url: ./pipelines/get-started/pipelines-get-started.md text: Use Azure Pipelines - url: ./pipelines/create-first-pipeline.md text: Create your first pipeline - url: ./pipelines/yaml-schema.md text: YAML Schema # Card - title: Azure Test Plans imageSrc: media/index/DevOpsIconTestPlans96.svg links: - url: ./test/overview.md text: What is Azure Test Plans? - url: ./test/create-a-test-plan.md text: Create a test plan - url: ./test/run-automated-tests-from-test-hub.md text: Run automated tests - url: ./test/create-test-cases.md text: Create manual tests # Card - title: Azure Artifacts imageSrc: ./media/index/DevOpsIconArtifacts96.svg links: - url: ./artifacts/overview.md text: What is Azure Artifacts? - url: ./artifacts/get-started-nuget.md text: NuGet - url: ./artifacts/get-started-npm.md text: Use npm to store JavaScript packages - url: ./artifacts/get-started-maven.md text: Maven packages # Card - title: Azure DevOps Server imageSrc: https://docs.microsoft.com/media/common/i_server.svg links: - url: ./user-guide/about-azure-devops-services-tfs.md text: Azure DevOps Services vs. Azure DevOps Server - url: /azure/devops/server/install/get-started text: Install - url: /azure/devops/server/upgrade/get-started text: Upgrade - url: ./migrate/migrate-from-tfs.md text: Migrate - url: /azure/devops/server/admin/admin-quick-ref text: Manage tools: title: Build & deploy your apps items: - title: ASP.NET imageSrc: ./pipelines/media/index/logo_net.svg url: ./pipelines/apps/aspnet/build-aspnet-4.md - title: .NET Core imageSrc: ./pipelines/media/index/logo_aspnetcore.svg url: ./pipelines/ecosystems/dotnet-core.md - title: C/C++ with GCC imageSrc: https://docs.microsoft.com/media/logos/logo_Cplusplus.svg url: ./pipelines/apps/c-cpp/gcc.md - title: C/C++ with VC++ imageSrc: https://docs.microsoft.com/media/logos/logo_visual-studio.svg url: ./pipelines/apps/windows/cpp.md - title: Docker imageSrc: ./pipelines/media/index/logo_dockercontainer.svg url: ./pipelines/tasks/build/docker.md - title: Java imageSrc: https://docs.microsoft.com/media/logos/logo_java.svg url: ./pipelines/ecosystems/java.md - title: JavaScript & Node.js imageSrc: ./pipelines/media/index/logo_nodejs.svg url: ./pipelines/ecosystems/javascript.md - title: Python imageSrc: https://docs.microsoft.com/media/logos/logo_python.svg url: ./pipelines/ecosystems/python.md - title: Azure Web Apps imageSrc: https://docs.microsoft.com/azure/media/index/app-service-web.svg url: ./pipelines/targets/webapp.md - title: Windows VM imageSrc: https://docs.microsoft.com/azure/media/index/virtualmachine.svg url: ./pipelines/apps/cd/deploy-webdeploy-iis-deploygroups.md - title: Kubernetes imageSrc: ./pipelines/media/index/logo_kubernetes.svg url: ./pipelines/ecosystems/kubernetes/deploy.md - title: Azure SQL Database imageSrc: https://docs.microsoft.com/azure/media/index/sqldatabase.svg url: ./pipelines/targets/azure-sqldb.md additionalContent section (optional) additionalContent: Supports up to 3 sections sections: - title: Get started items: # Card - title: Key concepts links: - url: ./project/navigation/index.md text: Web portal navigation - url: ./user-guide/work-team-explorer.md text: Team Explorer navigation - url: ./user-guide/tools.md text: Supported tools & clients - url: ./user-guide/services.md text: Supported features & services - url: ./organizations/security/get-started-stakeholder.md text: Stakeholder access - url: ./get-started/index.yml text: \"See more >\" # Card - title: Reporting links: - text: Dashboards, charts, reports, & widgets url: ./report/dashboards/overview.md - text: Widget catalog url: ./report/dashboards/widget-catalog.md - text: Work tracking query-based charts url: ./report/dashboards/charts.md - text: What are Analytic views? url: ./report/powerbi/what-are-analytics-views.md - url: ./report/index.yml text: \"See more >\" # Card - title: Collaborate links: - url: ./project/wiki/wiki-create-repo.md text: Create a wiki for your project - url: ./project/wiki/markdown-guidance.md text: Markdown syntax guidance - url: ./organizations/public/create-public-project.md text: Create a public project - url: ./boards/work-items/follow-work-items.md text: Follow work - url: ./project/navigation/set-favorites.md text: Set favorites - url: /azure/devops/project/index text: \"See more >\" # Card - title: GitHub integration links: - url: ./boards/github/connect-to-github.md text: Azure Boards & GitHub - url: ./pipelines/create-first-pipeline.md text: Azure Pipelines & GitHub - url: /azure/devops-project/azure-devops-project-github text: Azure DevOps Projects & GitHub - title: Tools & utilities items: # Card - title: Settings, Security, & Usage links: - text: Security, access, & identity url: ./organizations/security/about-security-identity.md - text: Permissions & groups url: ./organizations/security/about-permissions.md - text: Access levels url: ./organizations/security/access-levels.md - text: Billing url: ./organizations/billing/overview.md - text: User preferences url: ./organizations/settings/set-your-preferences.md - text: Organizations url: ./organizations/accounts/organization-management.md - text: Projects url: ./organizations/projects/index.md - text: Teams url: ./organizations/settings/scale/index.md - text: Repos, pipelines, & test url: ./pipelines/agents/pools-queues.md?toc=/azure/devops/organizations/toc.json&bc=/azure/devops/reference/organizations/toc.json - text: Notifications url: ./notifications/index.md?toc=/azure/devops/organizations/toc.json&bc=/azure/devops/reference/organizations/toc.json - text: Auditing url: ./organizations/audit/azure-devops-auditing.md # Card - title: Azure Boards settings links: - text: Configure & customize Azure Boards url: ./boards/configure-customize.md?toc=/azure/devops/reference/toc.json&bc=/azure/devops/reference/breadcrumb/toc.json - text: Compare processes url: ./boards/work-items/guidance/choose-process.md?toc=/azure/devops/reference/toc.json&bc=/azure/devops/reference/breadcrumb/toc.json - text: \"Area & iteration paths\" url: ./organizations/settings/about-areas-iterations.md?toc=/azure/devops/reference/toc.json&bc=/azure/devops/reference/breadcrumb/toc.json - text: Customize Inherited process url: ./organizations/settings/work/inheritance-process-model.md?toc=/azure/devops/reference/toc.json&bc=/azure/devops/reference/breadcrumb/toc.json - text: On-premises XML process model url: ./reference/on-premises-xml-process-model.md?toc=/azure/devops/reference/toc.json&bc=/azure/devops/reference/breadcrumb/toc.json - text: Hosted XML process model url: ./organizations/settings/work/hosted-xml-process-model.md?toc=/azure/devops/reference/toc.json&bc=/azure/devops/reference/breadcrumb/toc.json # Card - title: Marketplace & extensibility links: - text: Discover extensions url: ./marketplace/overview.md - text: Develop extensions url: ./extend/get-started/node.md - text: Integrate applications url: ./integrate/index.md - text: Service hooks url: ./service-hooks/overview.md # Card - title: Developer resources links: - text: Command line interface url: ./cli/index.md - text: REST APIs url: /rest/api/vsts/ - text: DevOps resource center url: https://docs.microsoft.com/azure/devops/learn/ footer (optional) footer: \" Blogs - Twitter - Stack Overflow - Issue Reporting - Developer Community - Service Status \""
  },
  "Dynamics365/Guides/Developer/Quickstart.html": {
    "href": "Dynamics365/Guides/Developer/Quickstart.html",
    "title": "Get Started | Eaton Docs",
    "keywords": "Get Started What is Dynamics 365 Guides? Tip Optional information to help a user be more successful Column1 Column2 Column3 Row1 Row2 Row3"
  },
  "Dynamics365/Guides/FAQs.html": {
    "href": "Dynamics365/Guides/FAQs.html",
    "title": "Frequently Asked Questions | Eaton Docs",
    "keywords": "Frequently Asked Questions How to update HoloLens Operating System (OS) & know it version? For checking HoloLens OS version – On HoloLens go to settings app -> System -> About & to update it. How to install apps on HoloLens? Find, install, and uninstall applications from the Microsoft Store How to know the current version of D365 Guides PC App? Open Guides PC App and Login Choose your Instance Then select About at bottom left of the screen to know the App version as shown below How to know the current version of D365 Guides HoloLens App? Open D365 Guides app on HoloLens and login After Selecting the instance select the setting gear icon as shown below At the bottom of the screen you will find the current app version installed on your HoloLens How to remove all Holograms in one click? Make sure that you update your HoloLens OS to latest version using broadband internet connection or with a hotspot having good internet speed because this update might be more than 1 GB and it would take lot of time with slow internet. Also make sure that your HoloLens device is connected to power supply (not through PC USB charging but through physical socket) while you are updating the OS and battery level is more than 70%. After this, navigate to Settings -> System-> Holograms and you can click on button \"Remove all holograms\". my recommendation is to turn the slider to “On” for “Automatically remove all holograms in mixed reality home when device shuts down”. This new setting will help to avoid any case where an application has been left running. To put it to use, be sure to power down the HoloLens by holding the power button until you see “Goodbye” on the screen when you are done using it. What to do in case of general HoloLens issue and provide logs to Microsoft? To file a feedback through Feedback Hub, navigate to the Feedback Hub app on your HL2 (may need to go to ‘All apps’). Give the feedback a name of “<Title of the issue>” but avoid including any detail about Eaton in the feedback as these are posted publicly. Once you submit the feedback item, please provide IT Innovation team with the date and time of submission. Where can I find Microsoft official documentation on Guides? Get started with Dynamics 365 Guides Microsoft Site: Frequently asked questions about Microsoft Dynamics 365 Guides Note Microsoft Guides Official FAQs"
  },
  "Dynamics365/Guides/HL-Authoring.html": {
    "href": "Dynamics365/Guides/HL-Authoring.html",
    "title": "Dynamics 365 Guides authoring on Eaton HL2 device | Eaton Docs",
    "keywords": "Dynamics 365 Guides authoring on Eaton HL2 device Voice Commands Dynamics 365 Guides voice commands How to use D365 Guides in production environment on HoloLens? Open Guides App on HoloLens (HL) and then air tap on Guide’s icon to launch the application Use “HoloLens-<Business unit>-<Site name>-<1>@Eaton.onmicrosoft.com” user account to auto login to Guides Select Sign in Select “Work or school account” Enter your site HL user account – “HoloLens-<Business unit>-<Site name>-<1>@Eaton.onmicrosoft.com” and continue, it should not prompt for password and should auto login. Once you are logged-in to Guides on HL, select the instance with name – “Mixed Reality - Prod”. Open your Guide in Author or operate mode Once Guide is opened in Author/Operate mode, scan the printed QR code. This QR code can be downloaded and printed using Guides PC App on Anchor step Note You might need to scroll down a bit to see the “Download QR code” button on PC App How to close immersive App like D365 Guides after using it . To exit an app that uses immersive view, use the Start gesture to bring up the Start menu, then select the Mixed reality home button Note Guides Best Practices"
  },
  "Dynamics365/Guides/PC-Authoring.html": {
    "href": "Dynamics365/Guides/PC-Authoring.html",
    "title": "Dynamics 365 Guides authoring on Eaton PC | Eaton Docs",
    "keywords": "Dynamics 365 Guides authoring on Eaton PC Setting Up Authoring Environment on Eaton PC On your computer Search for “Microsoft Store” and then click to open it Note If Microsoft store is not working correctly then raise an ITSC ticket. Now, search for “Microsoft Dynamics 365 Guides” and click on it. On next screen, click on install button to install it How to use D365 Guides in production environment on PC? You will use your own Eaton email ID (like anujprasad@eaton.com) to login to Guides on PC and do the authoring on PC. For authoring/operate mode on HL you will use HoloLens-VEH-<Site name>-1@Eaton.onmicrosoft.com account to auto login to Guides Once you are login into Guides select the instance with name – “Mixed Reality - Prod” Create New Guide and import all the assets that describes a step and then share the Guide & assets with corresponding HL user account for your respective site using the details described in section – “How to share a Guide or an asset (Image/video/3D parts)” How to share a Guide or an asset (Image/video/3D parts) to Access Team on PC Authoring on PC will have one additional step that needs to be done – Whenever you create a NEW Guides or add any NEW assets (such as pictures/videos/custom 3D model) to existing guides you will have to share that Guides/asset with your site corresponding Access Team (XS Tm) – “VEH-<Site name>-XSTm”. Open this this link on web browser on PC (Click Here) Then follow the below steps highlighted in red (in below images) in the order 1, 2 ,3 etc… till 11, in order to share Guides or any library content such as 3D, Images and Videos with HL user account & other PC authors of your site (Please Note: You can use the same procedure to share 3D, Images & Video that you find in the left hand side menu just below Guides highlighted with numeric 1 in red in below image) Steps description Select the asset that needs to be shared (Guides/3D/Images/Videos) – In above example screenshot “Guides” is selected Select the active object you want to share – In above example screenshot “Example Guide” is selected On the top menu click on “Share” button, In the Share guide window that opens, select the option – “Add User/Team” In the next screen called “Look Up Records”, select “Team” in “look for” field/filter Again, in the same screen “Look Up Records”, select “All User Access Team in “look in” field/filter Select the checkbox beside your site access team name. In above screen shot it’s showing – “VEH-Athens-XSTm” as an example Click on select button Click on Add button Give user follow permission by selecting the checkboxes for – “Read”, “Write”, “Append”, “Assign” & “Share” Click on Share button. Done Note Next Step: Dynamics 365 Guides authoring on Eaton HL2 device"
  },
  "Dynamics365/Guides/Quickstart.html": {
    "href": "Dynamics365/Guides/Quickstart.html",
    "title": "Overview of Dynamics 365 Guides | Eaton Docs",
    "keywords": "Overview of Dynamics 365 Guides Overview of Dynamics 365 Guides Get started with Dynamics 365 Guides Overview of authoring a guide in Dynamics 365 Guides Overview of operating a guide in Dynamics 365 Guides How to make a great mixed reality guide How to share guides with Access Teams Share Guides with user or access teams Know Issues Guides Authoring Process Note Next Step: Dynamics 365 Guides authoring on Eaton PC"
  },
  "Dynamics365/HoloLens/Quickstart.html": {
    "href": "Dynamics365/HoloLens/Quickstart.html",
    "title": "Get Started | Eaton Docs",
    "keywords": "Get Started How to use HoloLens Version 2 Getting around HoloLens 2 Connect HoloLens to a network Installing apps from the store How to update HoloLens Setting up HoloLens to use Windows Device Portal Connecting HoloLens over Wi-Fi Get installed app version from device portal Product safety warnings and instructions Capture Photos and Videos using HoloLens Hardware buttons to take photos Hardware buttons to record videos Limitations of mixed reality capture View your mixed reality photos and videos HoloLens Voice Commands General Voice commands Dynamics 365 Guides voice commands"
  },
  "Dynamics365/index.html": {
    "href": "Dynamics365/index.html",
    "title": "Hardware | Eaton Docs",
    "keywords": "Hardware HoloLens 2 Get Started Dynamics 365 Softwares Remote Assist Get Started Guides Get Started Layouts Get Started Get Started"
  },
  "Dynamics365/Layout/Quickstart.html": {
    "href": "Dynamics365/Layout/Quickstart.html",
    "title": "Get Started | Eaton Docs",
    "keywords": "Get Started What is Dynamics 365 Layouts? Tip Optional information to help a user be more successful"
  },
  "Dynamics365/Remote-Assist/Quickstart.html": {
    "href": "Dynamics365/Remote-Assist/Quickstart.html",
    "title": "Get Started | Eaton Docs",
    "keywords": "Get Started What is Dynamics 365 Remote Assist? Tip Optional information to help a user be more successful Column1 Column2 Column3 Row1 Row2 Row3"
  },
  "index.html": {
    "href": "index.html",
    "title": "Quick Start | Eaton Docs",
    "keywords": "Quick Start Get Started with Mixed Reality Get Started with Bot framework Important Only for Content Authors Refer to Markdown for how to write markdown files. Manage Table of Content - TOC Add images to the images folder if the file is referencing an image. Install content authoring tools - For developers How to use the Docs Markdown extension - For developers"
  }
}